
STM_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  0000729c  2**0
                  CONTENTS
  4 .ARM          00000008  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c0  080052c0  0000729c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c0  080052c0  000062c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  080052c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000029c  08005564  0000729c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08005564  000075c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000729c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114e1  00000000  00000000  000072cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215d  00000000  00000000  000187ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c71  00000000  00000000  0001b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e06e  00000000  00000000  0001c559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001271c  00000000  00000000  0003a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5c3d  00000000  00000000  0004cce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b4  00000000  00000000  00112964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00116d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000029c 	.word	0x2000029c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005260 	.word	0x08005260

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002a0 	.word	0x200002a0
 8000214:	08005260 	.word	0x08005260

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <readLine>:

uint8_t length;				//length of the message read

UART_HandleTypeDef huart1; // UART1 handler

uint16_t readLine(UART_HandleTypeDef *huart, uint8_t *data, uint16_t max_len, uint16_t timeout) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4611      	mov	r1, r2
 8000514:	461a      	mov	r2, r3
 8000516:	460b      	mov	r3, r1
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	4613      	mov	r3, r2
 800051c:	80bb      	strh	r3, [r7, #4]
	uint16_t count = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	82fb      	strh	r3, [r7, #22]
	while (HAL_UART_Receive(huart, &data[count], 1, timeout) == HAL_OK && count < max_len) {
 8000522:	e010      	b.n	8000546 <readLine+0x3e>
		count++;
 8000524:	8afb      	ldrh	r3, [r7, #22]
 8000526:	3301      	adds	r3, #1
 8000528:	82fb      	strh	r3, [r7, #22]
		if (data[count+1] == 'e' && data[count+2]== 'e')
 800052a:	8afb      	ldrh	r3, [r7, #22]
 800052c:	3301      	adds	r3, #1
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	4413      	add	r3, r2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b65      	cmp	r3, #101	@ 0x65
 8000536:	d106      	bne.n	8000546 <readLine+0x3e>
 8000538:	8afb      	ldrh	r3, [r7, #22]
 800053a:	3302      	adds	r3, #2
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b65      	cmp	r3, #101	@ 0x65
 8000544:	d00f      	beq.n	8000566 <readLine+0x5e>
	while (HAL_UART_Receive(huart, &data[count], 1, timeout) == HAL_OK && count < max_len) {
 8000546:	8afb      	ldrh	r3, [r7, #22]
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	18d1      	adds	r1, r2, r3
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	2201      	movs	r2, #1
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f003 ffa3 	bl	800449c <HAL_UART_Receive>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d105      	bne.n	8000568 <readLine+0x60>
 800055c:	8afa      	ldrh	r2, [r7, #22]
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3df      	bcc.n	8000524 <readLine+0x1c>
 8000564:	e000      	b.n	8000568 <readLine+0x60>
			break;
 8000566:	bf00      	nop
	}
	return count;
 8000568:	8afb      	ldrh	r3, [r7, #22]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f001 fac3 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 fcb4 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f001 f834 	bl	80015ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000584:	f000 fcfc 	bl	8000f80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000588:	f000 fd7c 	bl	8001084 <MX_TIM3_Init>
  MX_TIM17_Init();
 800058c:	f000 ff68 	bl	8001460 <MX_TIM17_Init>
  MX_TIM4_Init();
 8000590:	f000 fe06 	bl	80011a0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000594:	f000 ffde 	bl	8001554 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000598:	f000 fe7a 	bl	8001290 <MX_TIM6_Init>
  MX_TIM16_Init();
 800059c:	f000 fee6 	bl	800136c <MX_TIM16_Init>
  MX_TIM7_Init();
 80005a0:	f000 feae 	bl	8001300 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //START PWM OUTPUTS:
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		//Motor 1
 80005a4:	2100      	movs	r1, #0
 80005a6:	4865      	ldr	r0, [pc, #404]	@ (800073c <main+0x1c8>)
 80005a8:	f002 feb8 	bl	800331c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);		//Motor 2
 80005ac:	2104      	movs	r1, #4
 80005ae:	4863      	ldr	r0, [pc, #396]	@ (800073c <main+0x1c8>)
 80005b0:	f002 feb4 	bl	800331c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);		//Motor 3
 80005b4:	2100      	movs	r1, #0
 80005b6:	4862      	ldr	r0, [pc, #392]	@ (8000740 <main+0x1cc>)
 80005b8:	f002 feb0 	bl	800331c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		//Motor 4
 80005bc:	2104      	movs	r1, #4
 80005be:	4861      	ldr	r0, [pc, #388]	@ (8000744 <main+0x1d0>)
 80005c0:	f002 feac 	bl	800331c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  		//Motor 5
 80005c4:	2100      	movs	r1, #0
 80005c6:	485f      	ldr	r0, [pc, #380]	@ (8000744 <main+0x1d0>)
 80005c8:	f002 fea8 	bl	800331c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);		//Motor 6
 80005cc:	2100      	movs	r1, #0
 80005ce:	485e      	ldr	r0, [pc, #376]	@ (8000748 <main+0x1d4>)
 80005d0:	f002 fea4 	bl	800331c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		//Lights
 80005d4:	2108      	movs	r1, #8
 80005d6:	485b      	ldr	r0, [pc, #364]	@ (8000744 <main+0x1d0>)
 80005d8:	f002 fea0 	bl	800331c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);		//Camera
 80005dc:	2100      	movs	r1, #0
 80005de:	485b      	ldr	r0, [pc, #364]	@ (800074c <main+0x1d8>)
 80005e0:	f002 fe9c 	bl	800331c <HAL_TIM_PWM_Start>

  //Send a PWM with Duty Cycle 1500 microseconds to start the T200 for at least 7 seconds:
  TIM2->CCR1 = 31874;	//Motor 1
 80005e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e8:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 31874;	//Motor 2
 80005ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005f2:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80005f6:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM16->CCR1 = 31874;	//Motor 3
 80005f8:	4b55      	ldr	r3, [pc, #340]	@ (8000750 <main+0x1dc>)
 80005fa:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80005fe:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = 31874;	//Motor 4
 8000600:	4b54      	ldr	r3, [pc, #336]	@ (8000754 <main+0x1e0>)
 8000602:	f647 4282 	movw	r2, #31874	@ 0x7c82
 8000606:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR1 = 31874;  	//Motor 5
 8000608:	4b52      	ldr	r3, [pc, #328]	@ (8000754 <main+0x1e0>)
 800060a:	f647 4282 	movw	r2, #31874	@ 0x7c82
 800060e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->CCR1 = 31874;	//Motor 6
 8000610:	4b51      	ldr	r3, [pc, #324]	@ (8000758 <main+0x1e4>)
 8000612:	f647 4282 	movw	r2, #31874	@ 0x7c82
 8000616:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(7000);
 8000618:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800061c:	f001 fae2 	bl	8001be4 <HAL_Delay>

  //Turn off lights:
  TIM3->CCR3 = 23374;  	//Lights
 8000620:	4b4c      	ldr	r3, [pc, #304]	@ (8000754 <main+0x1e0>)
 8000622:	f645 324e 	movw	r2, #23374	@ 0x5b4e
 8000626:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR3 = 10000;  	//Cameras
 8000628:	4b4c      	ldr	r3, [pc, #304]	@ (800075c <main+0x1e8>)
 800062a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_TIM_Base_Start(&htim6);	//Timer timeout start
 8000630:	484b      	ldr	r0, [pc, #300]	@ (8000760 <main+0x1ec>)
 8000632:	f002 fd89 	bl	8003148 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(state) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	@ (8000764 <main+0x1f0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d8fb      	bhi.n	8000636 <main+0xc2>
 800063e:	a201      	add	r2, pc, #4	@ (adr r2, 8000644 <main+0xd0>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	08000655 	.word	0x08000655
 8000648:	08000a51 	.word	0x08000a51
 800064c:	08000ae9 	.word	0x08000ae9
 8000650:	08000bb5 	.word	0x08000bb5
		case 0:
			memset(message,0,34);		//Clean the array before writing on it
 8000654:	2222      	movs	r2, #34	@ 0x22
 8000656:	2100      	movs	r1, #0
 8000658:	4843      	ldr	r0, [pc, #268]	@ (8000768 <main+0x1f4>)
 800065a:	f004 fdd5 	bl	8005208 <memset>
			//Receive message: check Id and length
			length=readLine(&huart2, message, sizeof(message), 100);
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2222      	movs	r2, #34	@ 0x22
 8000662:	4941      	ldr	r1, [pc, #260]	@ (8000768 <main+0x1f4>)
 8000664:	4841      	ldr	r0, [pc, #260]	@ (800076c <main+0x1f8>)
 8000666:	f7ff ff4f 	bl	8000508 <readLine>
 800066a:	4603      	mov	r3, r0
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b40      	ldr	r3, [pc, #256]	@ (8000770 <main+0x1fc>)
 8000670:	701a      	strb	r2, [r3, #0]

			//Cameras & lights:
			if(length==16 && message[0]=='c' && message[1]=='c') {
 8000672:	4b3f      	ldr	r3, [pc, #252]	@ (8000770 <main+0x1fc>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b10      	cmp	r3, #16
 8000678:	f040 8084 	bne.w	8000784 <main+0x210>
 800067c:	4b3a      	ldr	r3, [pc, #232]	@ (8000768 <main+0x1f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b63      	cmp	r3, #99	@ 0x63
 8000682:	d17f      	bne.n	8000784 <main+0x210>
 8000684:	4b38      	ldr	r3, [pc, #224]	@ (8000768 <main+0x1f4>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	2b63      	cmp	r3, #99	@ 0x63
 800068a:	d17b      	bne.n	8000784 <main+0x210>
				HAL_TIM_Base_Stop(&htim6);
 800068c:	4834      	ldr	r0, [pc, #208]	@ (8000760 <main+0x1ec>)
 800068e:	f002 fdbd 	bl	800320c <HAL_TIM_Base_Stop>
				TIM6->CNT = 0;	//Reset timer
 8000692:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <main+0x200>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	@ 0x24

				camera = (message[3]-'0')*10 + (message[4]-'0');		//value for cameras
 8000698:	4b33      	ldr	r3, [pc, #204]	@ (8000768 <main+0x1f4>)
 800069a:	78db      	ldrb	r3, [r3, #3]
 800069c:	461a      	mov	r2, r3
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <main+0x1f4>)
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	3b10      	subs	r3, #16
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <main+0x204>)
 80006b4:	701a      	strb	r2, [r3, #0]
				light = (message[6]-'0')*100 + (message[7]-'0')*10 + (message[8]-'0');	//Value for lights
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <main+0x1f4>)
 80006b8:	799b      	ldrb	r3, [r3, #6]
 80006ba:	461a      	mov	r2, r3
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	4413      	add	r3, r2
 80006c0:	461a      	mov	r2, r3
 80006c2:	0091      	lsls	r1, r2, #2
 80006c4:	461a      	mov	r2, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <main+0x1f4>)
 80006d0:	79db      	ldrb	r3, [r3, #7]
 80006d2:	4619      	mov	r1, r3
 80006d4:	0089      	lsls	r1, r1, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <main+0x1f4>)
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	4413      	add	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3330      	adds	r3, #48	@ 0x30
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <main+0x208>)
 80006ee:	701a      	strb	r2, [r3, #0]
				checksum = (message[10]-'0')*100 + (message[11]-'0')*10 + (message[12]-'0');	//Checksum received
 80006f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <main+0x1f4>)
 80006f2:	7a9b      	ldrb	r3, [r3, #10]
 80006f4:	3b30      	subs	r3, #48	@ 0x30
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	461a      	mov	r2, r3
 8000700:	0091      	lsls	r1, r2, #2
 8000702:	461a      	mov	r2, r3
 8000704:	460b      	mov	r3, r1
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <main+0x1f4>)
 800070e:	7adb      	ldrb	r3, [r3, #11]
 8000710:	3b30      	subs	r3, #48	@ 0x30
 8000712:	b29b      	uxth	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	0089      	lsls	r1, r1, #2
 8000718:	440b      	add	r3, r1
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b29b      	uxth	r3, r3
 800071e:	4413      	add	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <main+0x1f4>)
 8000724:	7b12      	ldrb	r2, [r2, #12]
 8000726:	4413      	add	r3, r2
 8000728:	b29b      	uxth	r3, r3
 800072a:	3b30      	subs	r3, #48	@ 0x30
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <main+0x20c>)
 8000730:	801a      	strh	r2, [r3, #0]
				state=1;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <main+0x1f0>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e172      	b.n	8000a20 <main+0x4ac>
 800073a:	bf00      	nop
 800073c:	200002b8 	.word	0x200002b8
 8000740:	20000434 	.word	0x20000434
 8000744:	20000304 	.word	0x20000304
 8000748:	20000480 	.word	0x20000480
 800074c:	20000350 	.word	0x20000350
 8000750:	40014400 	.word	0x40014400
 8000754:	40000400 	.word	0x40000400
 8000758:	40014800 	.word	0x40014800
 800075c:	40000800 	.word	0x40000800
 8000760:	2000039c 	.word	0x2000039c
 8000764:	20000560 	.word	0x20000560
 8000768:	20000564 	.word	0x20000564
 800076c:	200004cc 	.word	0x200004cc
 8000770:	200005ba 	.word	0x200005ba
 8000774:	40001000 	.word	0x40001000
 8000778:	200005bc 	.word	0x200005bc
 800077c:	200005bb 	.word	0x200005bb
 8000780:	200005be 	.word	0x200005be
			}


			else if(length==34 && message[0]=='a' && message[1]=='a') {
 8000784:	4ba7      	ldr	r3, [pc, #668]	@ (8000a24 <main+0x4b0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b22      	cmp	r3, #34	@ 0x22
 800078a:	f040 8108 	bne.w	800099e <main+0x42a>
 800078e:	4ba6      	ldr	r3, [pc, #664]	@ (8000a28 <main+0x4b4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b61      	cmp	r3, #97	@ 0x61
 8000794:	f040 8103 	bne.w	800099e <main+0x42a>
 8000798:	4ba3      	ldr	r3, [pc, #652]	@ (8000a28 <main+0x4b4>)
 800079a:	785b      	ldrb	r3, [r3, #1]
 800079c:	2b61      	cmp	r3, #97	@ 0x61
 800079e:	f040 80fe 	bne.w	800099e <main+0x42a>
				HAL_TIM_Base_Stop(&htim6);
 80007a2:	48a2      	ldr	r0, [pc, #648]	@ (8000a2c <main+0x4b8>)
 80007a4:	f002 fd32 	bl	800320c <HAL_TIM_Base_Stop>
				TIM6->CNT = 0;	//Reset timer
 80007a8:	4ba1      	ldr	r3, [pc, #644]	@ (8000a30 <main+0x4bc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24

				value[0] = (message[3]-'0')*100 + (message[4]-'0')*10 + (message[5]-'0');			//Value for motor 1
 80007ae:	4b9e      	ldr	r3, [pc, #632]	@ (8000a28 <main+0x4b4>)
 80007b0:	78db      	ldrb	r3, [r3, #3]
 80007b2:	3b30      	subs	r3, #48	@ 0x30
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	0092      	lsls	r2, r2, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	0091      	lsls	r1, r2, #2
 80007c0:	461a      	mov	r2, r3
 80007c2:	460b      	mov	r3, r1
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b97      	ldr	r3, [pc, #604]	@ (8000a28 <main+0x4b4>)
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	3b30      	subs	r3, #48	@ 0x30
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	0089      	lsls	r1, r1, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4a91      	ldr	r2, [pc, #580]	@ (8000a28 <main+0x4b4>)
 80007e2:	7952      	ldrb	r2, [r2, #5]
 80007e4:	4413      	add	r3, r2
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	3b30      	subs	r3, #48	@ 0x30
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b91      	ldr	r3, [pc, #580]	@ (8000a34 <main+0x4c0>)
 80007ee:	801a      	strh	r2, [r3, #0]
				value[1] = (message[7]-'0')*100 + (message[8]-'0')*10 + (message[9]-'0');			//Value for motor 2
 80007f0:	4b8d      	ldr	r3, [pc, #564]	@ (8000a28 <main+0x4b4>)
 80007f2:	79db      	ldrb	r3, [r3, #7]
 80007f4:	3b30      	subs	r3, #48	@ 0x30
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	461a      	mov	r2, r3
 8000800:	0091      	lsls	r1, r2, #2
 8000802:	461a      	mov	r2, r3
 8000804:	460b      	mov	r3, r1
 8000806:	4413      	add	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b86      	ldr	r3, [pc, #536]	@ (8000a28 <main+0x4b4>)
 800080e:	7a1b      	ldrb	r3, [r3, #8]
 8000810:	3b30      	subs	r3, #48	@ 0x30
 8000812:	b29b      	uxth	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	0089      	lsls	r1, r1, #2
 8000818:	440b      	add	r3, r1
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	b29b      	uxth	r3, r3
 800081e:	4413      	add	r3, r2
 8000820:	b29b      	uxth	r3, r3
 8000822:	4a81      	ldr	r2, [pc, #516]	@ (8000a28 <main+0x4b4>)
 8000824:	7a52      	ldrb	r2, [r2, #9]
 8000826:	4413      	add	r3, r2
 8000828:	b29b      	uxth	r3, r3
 800082a:	3b30      	subs	r3, #48	@ 0x30
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b81      	ldr	r3, [pc, #516]	@ (8000a34 <main+0x4c0>)
 8000830:	805a      	strh	r2, [r3, #2]
				value[2] = (message[11]-'0')*100 + (message[12]-'0')*10 + (message[13]-'0');		//Value for motor 3
 8000832:	4b7d      	ldr	r3, [pc, #500]	@ (8000a28 <main+0x4b4>)
 8000834:	7adb      	ldrb	r3, [r3, #11]
 8000836:	3b30      	subs	r3, #48	@ 0x30
 8000838:	b29b      	uxth	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	4413      	add	r3, r2
 8000840:	461a      	mov	r2, r3
 8000842:	0091      	lsls	r1, r2, #2
 8000844:	461a      	mov	r2, r3
 8000846:	460b      	mov	r3, r1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b76      	ldr	r3, [pc, #472]	@ (8000a28 <main+0x4b4>)
 8000850:	7b1b      	ldrb	r3, [r3, #12]
 8000852:	3b30      	subs	r3, #48	@ 0x30
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	0089      	lsls	r1, r1, #2
 800085a:	440b      	add	r3, r1
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	b29b      	uxth	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	b29b      	uxth	r3, r3
 8000864:	4a70      	ldr	r2, [pc, #448]	@ (8000a28 <main+0x4b4>)
 8000866:	7b52      	ldrb	r2, [r2, #13]
 8000868:	4413      	add	r3, r2
 800086a:	b29b      	uxth	r3, r3
 800086c:	3b30      	subs	r3, #48	@ 0x30
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b70      	ldr	r3, [pc, #448]	@ (8000a34 <main+0x4c0>)
 8000872:	809a      	strh	r2, [r3, #4]
				value[3] = (message[15]-'0')*100 + (message[16]-'0')*10 + (message[17]-'0');		//Value for motor 4
 8000874:	4b6c      	ldr	r3, [pc, #432]	@ (8000a28 <main+0x4b4>)
 8000876:	7bdb      	ldrb	r3, [r3, #15]
 8000878:	3b30      	subs	r3, #48	@ 0x30
 800087a:	b29b      	uxth	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	4413      	add	r3, r2
 8000882:	461a      	mov	r2, r3
 8000884:	0091      	lsls	r1, r2, #2
 8000886:	461a      	mov	r2, r3
 8000888:	460b      	mov	r3, r1
 800088a:	4413      	add	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b65      	ldr	r3, [pc, #404]	@ (8000a28 <main+0x4b4>)
 8000892:	7c1b      	ldrb	r3, [r3, #16]
 8000894:	3b30      	subs	r3, #48	@ 0x30
 8000896:	b29b      	uxth	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	0089      	lsls	r1, r1, #2
 800089c:	440b      	add	r3, r1
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	4413      	add	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4a60      	ldr	r2, [pc, #384]	@ (8000a28 <main+0x4b4>)
 80008a8:	7c52      	ldrb	r2, [r2, #17]
 80008aa:	4413      	add	r3, r2
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3b30      	subs	r3, #48	@ 0x30
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b60      	ldr	r3, [pc, #384]	@ (8000a34 <main+0x4c0>)
 80008b4:	80da      	strh	r2, [r3, #6]
				value[4] = (message[19]-'0')*100 + (message[20]-'0')*10 + (message[21]-'0');		//Value for motor 5
 80008b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a28 <main+0x4b4>)
 80008b8:	7cdb      	ldrb	r3, [r3, #19]
 80008ba:	3b30      	subs	r3, #48	@ 0x30
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	0092      	lsls	r2, r2, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	0091      	lsls	r1, r2, #2
 80008c8:	461a      	mov	r2, r3
 80008ca:	460b      	mov	r3, r1
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b55      	ldr	r3, [pc, #340]	@ (8000a28 <main+0x4b4>)
 80008d4:	7d1b      	ldrb	r3, [r3, #20]
 80008d6:	3b30      	subs	r3, #48	@ 0x30
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	0089      	lsls	r1, r1, #2
 80008de:	440b      	add	r3, r1
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000a28 <main+0x4b4>)
 80008ea:	7d52      	ldrb	r2, [r2, #21]
 80008ec:	4413      	add	r3, r2
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	3b30      	subs	r3, #48	@ 0x30
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b4f      	ldr	r3, [pc, #316]	@ (8000a34 <main+0x4c0>)
 80008f6:	811a      	strh	r2, [r3, #8]
				value[5] = (message[23]-'0')*100 + (message[24]-'0')*10 + (message[25]-'0');		//Value for motor 6
 80008f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a28 <main+0x4b4>)
 80008fa:	7ddb      	ldrb	r3, [r3, #23]
 80008fc:	3b30      	subs	r3, #48	@ 0x30
 80008fe:	b29b      	uxth	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4413      	add	r3, r2
 8000906:	461a      	mov	r2, r3
 8000908:	0091      	lsls	r1, r2, #2
 800090a:	461a      	mov	r2, r3
 800090c:	460b      	mov	r3, r1
 800090e:	4413      	add	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <main+0x4b4>)
 8000916:	7e1b      	ldrb	r3, [r3, #24]
 8000918:	3b30      	subs	r3, #48	@ 0x30
 800091a:	b29b      	uxth	r3, r3
 800091c:	4619      	mov	r1, r3
 800091e:	0089      	lsls	r1, r1, #2
 8000920:	440b      	add	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	4413      	add	r3, r2
 8000928:	b29b      	uxth	r3, r3
 800092a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a28 <main+0x4b4>)
 800092c:	7e52      	ldrb	r2, [r2, #25]
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	3b30      	subs	r3, #48	@ 0x30
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b3f      	ldr	r3, [pc, #252]	@ (8000a34 <main+0x4c0>)
 8000938:	815a      	strh	r2, [r3, #10]
				value[6] = (message[27]-'0')*1000 + (message[28]-'0')*100 + (message[29]-'0')*10 + (message[30]-'0');		//Checksum received
 800093a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a28 <main+0x4b4>)
 800093c:	7edb      	ldrb	r3, [r3, #27]
 800093e:	3b30      	subs	r3, #48	@ 0x30
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	0152      	lsls	r2, r2, #5
 8000946:	1ad2      	subs	r2, r2, r3
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	4413      	add	r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <main+0x4b4>)
 8000952:	7f1b      	ldrb	r3, [r3, #28]
 8000954:	3b30      	subs	r3, #48	@ 0x30
 8000956:	b29b      	uxth	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	0089      	lsls	r1, r1, #2
 800095c:	440b      	add	r3, r1
 800095e:	4619      	mov	r1, r3
 8000960:	0088      	lsls	r0, r1, #2
 8000962:	4619      	mov	r1, r3
 8000964:	4603      	mov	r3, r0
 8000966:	440b      	add	r3, r1
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	b29b      	uxth	r3, r3
 800096c:	4413      	add	r3, r2
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <main+0x4b4>)
 8000972:	7f5b      	ldrb	r3, [r3, #29]
 8000974:	3b30      	subs	r3, #48	@ 0x30
 8000976:	b29b      	uxth	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	0089      	lsls	r1, r1, #2
 800097c:	440b      	add	r3, r1
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	b29b      	uxth	r3, r3
 8000982:	4413      	add	r3, r2
 8000984:	b29b      	uxth	r3, r3
 8000986:	4a28      	ldr	r2, [pc, #160]	@ (8000a28 <main+0x4b4>)
 8000988:	7f92      	ldrb	r2, [r2, #30]
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	3b30      	subs	r3, #48	@ 0x30
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <main+0x4c0>)
 8000994:	819a      	strh	r2, [r3, #12]
				state=1;
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <main+0x4c4>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e040      	b.n	8000a20 <main+0x4ac>
	  		  }

	  		  else {
	  			  //Security protocol, if PC crashes stops thrusters (2 seconds of no data received):
	  			  if(__HAL_TIM_GET_COUNTER(&htim6) >= timeout*32768) {
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <main+0x4b8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a4:	2202      	movs	r2, #2
 80009a6:	03d2      	lsls	r2, r2, #15
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d335      	bcc.n	8000a18 <main+0x4a4>
	  				  TIM2->CCR1 = 31874;	//Motor 1
 80009ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009b0:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80009b4:	635a      	str	r2, [r3, #52]	@ 0x34
	  				  TIM2->CCR2 = 31874;	//Motor 2
 80009b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ba:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80009be:	639a      	str	r2, [r3, #56]	@ 0x38
	  				  TIM16->CCR1 = 31874;	//Motor 3
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <main+0x4c8>)
 80009c2:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34
	  				  TIM3->CCR2 = 31874;	//Motor 4
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <main+0x4cc>)
 80009ca:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80009ce:	639a      	str	r2, [r3, #56]	@ 0x38
	  				  TIM3->CCR1 = 31874;  	//Motor 5
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <main+0x4cc>)
 80009d2:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80009d6:	635a      	str	r2, [r3, #52]	@ 0x34
	  				  TIM17->CCR1 = 31874;	//Motor 6
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <main+0x4d0>)
 80009da:	f647 4282 	movw	r2, #31874	@ 0x7c82
 80009de:	635a      	str	r2, [r3, #52]	@ 0x34

	  				  //Update value in CurrentPoint variable:
	  				  for(i=0;i<=5;i++) {
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <main+0x4d4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e00d      	b.n	8000a04 <main+0x490>
	  					  currentPoint[i]=31874;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <main+0x4d4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <main+0x4d8>)
 80009f0:	f647 4182 	movw	r1, #31874	@ 0x7c82
 80009f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				  for(i=0;i<=5;i++) {
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <main+0x4d4>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <main+0x4d4>)
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <main+0x4d4>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d9ed      	bls.n	80009e8 <main+0x474>
	  				  }

	  				  HAL_TIM_Base_Stop(&htim6);
 8000a0c:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <main+0x4b8>)
 8000a0e:	f002 fbfd 	bl	800320c <HAL_TIM_Base_Stop>
	  				  TIM6->CNT = 0;	//Reset timer
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <main+0x4bc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
	  			  }
	  			  state=0;
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <main+0x4c4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	  		  }
		  break;
 8000a1e:	e238      	b.n	8000e92 <main+0x91e>
 8000a20:	e237      	b.n	8000e92 <main+0x91e>
 8000a22:	bf00      	nop
 8000a24:	200005ba 	.word	0x200005ba
 8000a28:	20000564 	.word	0x20000564
 8000a2c:	2000039c 	.word	0x2000039c
 8000a30:	40001000 	.word	0x40001000
 8000a34:	20000588 	.word	0x20000588
 8000a38:	20000560 	.word	0x20000560
 8000a3c:	40014400 	.word	0x40014400
 8000a40:	40000400 	.word	0x40000400
 8000a44:	40014800 	.word	0x40014800
 8000a48:	20000561 	.word	0x20000561
 8000a4c:	20000000 	.word	0x20000000

		  case 1:
			  //Check if values received are inside range:

			  if(message[0]=='a' && message[1]=='a') {
 8000a50:	4b8c      	ldr	r3, [pc, #560]	@ (8000c84 <main+0x710>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b61      	cmp	r3, #97	@ 0x61
 8000a56:	d122      	bne.n	8000a9e <main+0x52a>
 8000a58:	4b8a      	ldr	r3, [pc, #552]	@ (8000c84 <main+0x710>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	2b61      	cmp	r3, #97	@ 0x61
 8000a5e:	d11e      	bne.n	8000a9e <main+0x52a>
				  for(i=0;i<=5;i++) {
 8000a60:	4b89      	ldr	r3, [pc, #548]	@ (8000c88 <main+0x714>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e015      	b.n	8000a94 <main+0x520>
					  if(value[i]>255 || value[i]<0) {
 8000a68:	4b87      	ldr	r3, [pc, #540]	@ (8000c88 <main+0x714>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b87      	ldr	r3, [pc, #540]	@ (8000c8c <main+0x718>)
 8000a70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a74:	2bff      	cmp	r3, #255	@ 0xff
 8000a76:	d904      	bls.n	8000a82 <main+0x50e>
	  				  	  state=0;
 8000a78:	4b85      	ldr	r3, [pc, #532]	@ (8000c90 <main+0x71c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	  				  	  break;
 8000a7e:	bf00      	nop
			  if(message[0]=='a' && message[1]=='a') {
 8000a80:	e031      	b.n	8000ae6 <main+0x572>
	  				  }
	  				  else {
	  					  state=2;
 8000a82:	4b83      	ldr	r3, [pc, #524]	@ (8000c90 <main+0x71c>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	701a      	strb	r2, [r3, #0]
				  for(i=0;i<=5;i++) {
 8000a88:	4b7f      	ldr	r3, [pc, #508]	@ (8000c88 <main+0x714>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b7d      	ldr	r3, [pc, #500]	@ (8000c88 <main+0x714>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	4b7c      	ldr	r3, [pc, #496]	@ (8000c88 <main+0x714>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d9e5      	bls.n	8000a68 <main+0x4f4>
			  if(message[0]=='a' && message[1]=='a') {
 8000a9c:	e023      	b.n	8000ae6 <main+0x572>
	  				  }
				  }
			  }

			  else if(message[0]=='c' && message[1]=='c') {
 8000a9e:	4b79      	ldr	r3, [pc, #484]	@ (8000c84 <main+0x710>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b63      	cmp	r3, #99	@ 0x63
 8000aa4:	f040 81ec 	bne.w	8000e80 <main+0x90c>
 8000aa8:	4b76      	ldr	r3, [pc, #472]	@ (8000c84 <main+0x710>)
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	2b63      	cmp	r3, #99	@ 0x63
 8000aae:	f040 81e7 	bne.w	8000e80 <main+0x90c>
				  for(i=0;i<=1;i++) {
 8000ab2:	4b75      	ldr	r3, [pc, #468]	@ (8000c88 <main+0x714>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e010      	b.n	8000adc <main+0x568>
					  if(light>255 || light<0) {
						  state=0;
						  break;
					  }
	  				  if (camera>30 || camera<0) {
 8000aba:	4b76      	ldr	r3, [pc, #472]	@ (8000c94 <main+0x720>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b1e      	cmp	r3, #30
 8000ac0:	d903      	bls.n	8000aca <main+0x556>
	  					  state=0;
 8000ac2:	4b73      	ldr	r3, [pc, #460]	@ (8000c90 <main+0x71c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	  					  break;
 8000ac8:	e00d      	b.n	8000ae6 <main+0x572>
	  				  }
	  				  else {
	  					  state=2;
 8000aca:	4b71      	ldr	r3, [pc, #452]	@ (8000c90 <main+0x71c>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	701a      	strb	r2, [r3, #0]
				  for(i=0;i<=1;i++) {
 8000ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8000c88 <main+0x714>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8000c88 <main+0x714>)
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	4b6a      	ldr	r3, [pc, #424]	@ (8000c88 <main+0x714>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d9ea      	bls.n	8000aba <main+0x546>
	  				  }
				  }
			  }

		  break;
 8000ae4:	e1cc      	b.n	8000e80 <main+0x90c>
 8000ae6:	e1cb      	b.n	8000e80 <main+0x90c>

		  case 2:
			  //Check if checksum is inside range and calculate checksum to compare:

			  if(message[0]=='a' && message[1]=='a') {
 8000ae8:	4b66      	ldr	r3, [pc, #408]	@ (8000c84 <main+0x710>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b61      	cmp	r3, #97	@ 0x61
 8000aee:	d133      	bne.n	8000b58 <main+0x5e4>
 8000af0:	4b64      	ldr	r3, [pc, #400]	@ (8000c84 <main+0x710>)
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	2b61      	cmp	r3, #97	@ 0x61
 8000af6:	d12f      	bne.n	8000b58 <main+0x5e4>
				  if(value[6]>=0 && value[6]<=1530) {
 8000af8:	4b64      	ldr	r3, [pc, #400]	@ (8000c8c <main+0x718>)
 8000afa:	899b      	ldrh	r3, [r3, #12]
 8000afc:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d825      	bhi.n	8000b50 <main+0x5dc>
					  check = value[0] + value[1] + value[2] + value[3] + value[4] + value[5];
 8000b04:	4b61      	ldr	r3, [pc, #388]	@ (8000c8c <main+0x718>)
 8000b06:	881a      	ldrh	r2, [r3, #0]
 8000b08:	4b60      	ldr	r3, [pc, #384]	@ (8000c8c <main+0x718>)
 8000b0a:	885b      	ldrh	r3, [r3, #2]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b5e      	ldr	r3, [pc, #376]	@ (8000c8c <main+0x718>)
 8000b12:	889b      	ldrh	r3, [r3, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b5c      	ldr	r3, [pc, #368]	@ (8000c8c <main+0x718>)
 8000b1a:	88db      	ldrh	r3, [r3, #6]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b5a      	ldr	r3, [pc, #360]	@ (8000c8c <main+0x718>)
 8000b22:	891b      	ldrh	r3, [r3, #8]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b58      	ldr	r3, [pc, #352]	@ (8000c8c <main+0x718>)
 8000b2a:	895b      	ldrh	r3, [r3, #10]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b59      	ldr	r3, [pc, #356]	@ (8000c98 <main+0x724>)
 8000b32:	801a      	strh	r2, [r3, #0]
					  if (check==value[6]) {
 8000b34:	4b55      	ldr	r3, [pc, #340]	@ (8000c8c <main+0x718>)
 8000b36:	899a      	ldrh	r2, [r3, #12]
 8000b38:	4b57      	ldr	r3, [pc, #348]	@ (8000c98 <main+0x724>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d103      	bne.n	8000b48 <main+0x5d4>
						  state = 3;
 8000b40:	4b53      	ldr	r3, [pc, #332]	@ (8000c90 <main+0x71c>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	701a      	strb	r2, [r3, #0]
				  if(value[6]>=0 && value[6]<=1530) {
 8000b46:	e034      	b.n	8000bb2 <main+0x63e>
					  }
					  else {
						  state=0;
 8000b48:	4b51      	ldr	r3, [pc, #324]	@ (8000c90 <main+0x71c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
				  if(value[6]>=0 && value[6]<=1530) {
 8000b4e:	e030      	b.n	8000bb2 <main+0x63e>
					  }
				  }
				  else {
					  state=0;
 8000b50:	4b4f      	ldr	r3, [pc, #316]	@ (8000c90 <main+0x71c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
				  if(value[6]>=0 && value[6]<=1530) {
 8000b56:	e02c      	b.n	8000bb2 <main+0x63e>
				  }
			  }

			  else if(message[0]=='c' && message[1]=='c') {
 8000b58:	4b4a      	ldr	r3, [pc, #296]	@ (8000c84 <main+0x710>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b63      	cmp	r3, #99	@ 0x63
 8000b5e:	f040 8192 	bne.w	8000e86 <main+0x912>
 8000b62:	4b48      	ldr	r3, [pc, #288]	@ (8000c84 <main+0x710>)
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	2b63      	cmp	r3, #99	@ 0x63
 8000b68:	f040 818d 	bne.w	8000e86 <main+0x912>
				  if(checksum>=0 && checksum<=285) {
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <main+0x728>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 8000b74:	d219      	bcs.n	8000baa <main+0x636>
					  check = light + camera;
 8000b76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca0 <main+0x72c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <main+0x720>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <main+0x724>)
 8000b86:	801a      	strh	r2, [r3, #0]
					  if (check==checksum) {
 8000b88:	4b43      	ldr	r3, [pc, #268]	@ (8000c98 <main+0x724>)
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	4b43      	ldr	r3, [pc, #268]	@ (8000c9c <main+0x728>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d106      	bne.n	8000ba2 <main+0x62e>
						  state = 3;
 8000b94:	4b3e      	ldr	r3, [pc, #248]	@ (8000c90 <main+0x71c>)
 8000b96:	2203      	movs	r2, #3
 8000b98:	701a      	strb	r2, [r3, #0]
						  HAL_TIM_Base_Start(&htim7);	//Start timer for lights & cameras timing [VERIFY IF THIS IS NECESSARY]
 8000b9a:	4842      	ldr	r0, [pc, #264]	@ (8000ca4 <main+0x730>)
 8000b9c:	f002 fad4 	bl	8003148 <HAL_TIM_Base_Start>
				  }
				  else {
					  state=0;
				  }
			  }
		  break;
 8000ba0:	e171      	b.n	8000e86 <main+0x912>
						  state=0;
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8000c90 <main+0x71c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
		  break;
 8000ba8:	e16d      	b.n	8000e86 <main+0x912>
					  state=0;
 8000baa:	4b39      	ldr	r3, [pc, #228]	@ (8000c90 <main+0x71c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
		  break;
 8000bb0:	e169      	b.n	8000e86 <main+0x912>
 8000bb2:	e168      	b.n	8000e86 <main+0x912>

		  case 3:
			  //Process to send PWM values

			  if(message[0]=='a' && message[1]=='a') {
 8000bb4:	4b33      	ldr	r3, [pc, #204]	@ (8000c84 <main+0x710>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b61      	cmp	r3, #97	@ 0x61
 8000bba:	f040 80fe 	bne.w	8000dba <main+0x846>
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <main+0x710>)
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	2b61      	cmp	r3, #97	@ 0x61
 8000bc4:	f040 80f9 	bne.w	8000dba <main+0x846>
				  //setPoint equals to the value in the LUT from position 0 to 255:
				  setPoint[0] = CCRtable[value[0]];
 8000bc8:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <main+0x718>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <main+0x734>)
 8000bd0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000bd4:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <main+0x738>)
 8000bd6:	801a      	strh	r2, [r3, #0]
				  setPoint[1] = CCRtable[value[1]];
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c8c <main+0x718>)
 8000bda:	885b      	ldrh	r3, [r3, #2]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <main+0x734>)
 8000be0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000be4:	4b31      	ldr	r3, [pc, #196]	@ (8000cac <main+0x738>)
 8000be6:	805a      	strh	r2, [r3, #2]
				  setPoint[2] = CCRtable[value[2]];
 8000be8:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <main+0x718>)
 8000bea:	889b      	ldrh	r3, [r3, #4]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <main+0x734>)
 8000bf0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <main+0x738>)
 8000bf6:	809a      	strh	r2, [r3, #4]
				  setPoint[3] = CCRtable[value[3]];
 8000bf8:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <main+0x718>)
 8000bfa:	88db      	ldrh	r3, [r3, #6]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <main+0x734>)
 8000c00:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <main+0x738>)
 8000c06:	80da      	strh	r2, [r3, #6]
				  setPoint[4] = CCRtable[value[4]];
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <main+0x718>)
 8000c0a:	891b      	ldrh	r3, [r3, #8]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <main+0x734>)
 8000c10:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <main+0x738>)
 8000c16:	811a      	strh	r2, [r3, #8]
				  setPoint[5] = CCRtable[value[5]];
 8000c18:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <main+0x718>)
 8000c1a:	895b      	ldrh	r3, [r3, #10]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <main+0x734>)
 8000c20:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <main+0x738>)
 8000c26:	815a      	strh	r2, [r3, #10]

				  for(i=0;i<=5;i++) {
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <main+0x714>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e073      	b.n	8000d18 <main+0x7a4>
					  slope[i]=setPoint[i]-currentPoint[i];
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <main+0x714>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <main+0x738>)
 8000c38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <main+0x714>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <main+0x73c>)
 8000c44:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	b299      	uxth	r1, r3
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <main+0x714>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	b209      	sxth	r1, r1
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <main+0x740>)
 8000c56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

					  //Limit the values of slope:
					  if(slope[i]>maxSlope) {
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <main+0x714>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <main+0x740>)
 8000c62:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <main+0x744>)
 8000c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dd25      	ble.n	8000cbc <main+0x748>
						  slope[i]=maxSlope;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <main+0x714>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <main+0x744>)
 8000c78:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <main+0x740>)
 8000c7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000c82:	e02f      	b.n	8000ce4 <main+0x770>
 8000c84:	20000564 	.word	0x20000564
 8000c88:	20000561 	.word	0x20000561
 8000c8c:	20000588 	.word	0x20000588
 8000c90:	20000560 	.word	0x20000560
 8000c94:	200005bc 	.word	0x200005bc
 8000c98:	200005b8 	.word	0x200005b8
 8000c9c:	200005be 	.word	0x200005be
 8000ca0:	200005bb 	.word	0x200005bb
 8000ca4:	200003e8 	.word	0x200003e8
 8000ca8:	20000014 	.word	0x20000014
 8000cac:	20000598 	.word	0x20000598
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	200005a8 	.word	0x200005a8
 8000cb8:	2000000e 	.word	0x2000000e
					  }

					  else if (slope[i]<minSlope) {
 8000cbc:	4b76      	ldr	r3, [pc, #472]	@ (8000e98 <main+0x924>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b76      	ldr	r3, [pc, #472]	@ (8000e9c <main+0x928>)
 8000cc4:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000cc8:	4b75      	ldr	r3, [pc, #468]	@ (8000ea0 <main+0x92c>)
 8000cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	da08      	bge.n	8000ce4 <main+0x770>
						  slope[i]=minSlope;
 8000cd2:	4b71      	ldr	r3, [pc, #452]	@ (8000e98 <main+0x924>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b71      	ldr	r3, [pc, #452]	@ (8000ea0 <main+0x92c>)
 8000cda:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000cde:	4b6f      	ldr	r3, [pc, #444]	@ (8000e9c <main+0x928>)
 8000ce0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					  }

					  //Values to send:
					  currentPoint[i]+=slope[i];
 8000ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8000e98 <main+0x924>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b6e      	ldr	r3, [pc, #440]	@ (8000ea4 <main+0x930>)
 8000cec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000cf0:	4b69      	ldr	r3, [pc, #420]	@ (8000e98 <main+0x924>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4b69      	ldr	r3, [pc, #420]	@ (8000e9c <main+0x928>)
 8000cf8:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4966      	ldr	r1, [pc, #408]	@ (8000e98 <main+0x924>)
 8000d00:	7809      	ldrb	r1, [r1, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b67      	ldr	r3, [pc, #412]	@ (8000ea4 <main+0x930>)
 8000d08:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				  for(i=0;i<=5;i++) {
 8000d0c:	4b62      	ldr	r3, [pc, #392]	@ (8000e98 <main+0x924>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b60      	ldr	r3, [pc, #384]	@ (8000e98 <main+0x924>)
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	4b5f      	ldr	r3, [pc, #380]	@ (8000e98 <main+0x924>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	d987      	bls.n	8000c30 <main+0x6bc>
				  }

				  //Send values:
				  TIM2->CCR1 = currentPoint[0];		//Motor 1
 8000d20:	4b60      	ldr	r3, [pc, #384]	@ (8000ea4 <main+0x930>)
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d28:	635a      	str	r2, [r3, #52]	@ 0x34
				  TIM2->CCR2 = currentPoint[1];		//Motor 2
 8000d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea4 <main+0x930>)
 8000d2c:	885a      	ldrh	r2, [r3, #2]
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d32:	639a      	str	r2, [r3, #56]	@ 0x38
				  TIM16->CCR1 = currentPoint[2];	//Motor 3
 8000d34:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea4 <main+0x930>)
 8000d36:	889a      	ldrh	r2, [r3, #4]
 8000d38:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea8 <main+0x934>)
 8000d3a:	635a      	str	r2, [r3, #52]	@ 0x34
				  TIM3->CCR2 = currentPoint[3];		//Motor 4
 8000d3c:	4b59      	ldr	r3, [pc, #356]	@ (8000ea4 <main+0x930>)
 8000d3e:	88da      	ldrh	r2, [r3, #6]
 8000d40:	4b5a      	ldr	r3, [pc, #360]	@ (8000eac <main+0x938>)
 8000d42:	639a      	str	r2, [r3, #56]	@ 0x38
				  TIM3->CCR1 = currentPoint[4];  	//Motor 5
 8000d44:	4b57      	ldr	r3, [pc, #348]	@ (8000ea4 <main+0x930>)
 8000d46:	891a      	ldrh	r2, [r3, #8]
 8000d48:	4b58      	ldr	r3, [pc, #352]	@ (8000eac <main+0x938>)
 8000d4a:	635a      	str	r2, [r3, #52]	@ 0x34
				  TIM17->CCR1 = currentPoint[5];	//Motor 6
 8000d4c:	4b55      	ldr	r3, [pc, #340]	@ (8000ea4 <main+0x930>)
 8000d4e:	895a      	ldrh	r2, [r3, #10]
 8000d50:	4b57      	ldr	r3, [pc, #348]	@ (8000eb0 <main+0x93c>)
 8000d52:	635a      	str	r2, [r3, #52]	@ 0x34

				  HAL_Delay(200);
 8000d54:	20c8      	movs	r0, #200	@ 0xc8
 8000d56:	f000 ff45 	bl	8001be4 <HAL_Delay>
				  error=0;	//Reset error
 8000d5a:	4b56      	ldr	r3, [pc, #344]	@ (8000eb4 <main+0x940>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	801a      	strh	r2, [r3, #0]

				  for(i=0;i<=5;i++) {
 8000d60:	4b4d      	ldr	r3, [pc, #308]	@ (8000e98 <main+0x924>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e015      	b.n	8000d94 <main+0x820>
					  error=error+slope[i];
 8000d68:	4b4b      	ldr	r3, [pc, #300]	@ (8000e98 <main+0x924>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e9c <main+0x928>)
 8000d70:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b4f      	ldr	r3, [pc, #316]	@ (8000eb4 <main+0x940>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b4b      	ldr	r3, [pc, #300]	@ (8000eb4 <main+0x940>)
 8000d86:	801a      	strh	r2, [r3, #0]
				  for(i=0;i<=5;i++) {
 8000d88:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <main+0x924>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <main+0x924>)
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	4b40      	ldr	r3, [pc, #256]	@ (8000e98 <main+0x924>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	d9e5      	bls.n	8000d68 <main+0x7f4>
				  }
				  //When all setPoints are achieved return to initial state:
				  if(error==0) {
 8000d9c:	4b45      	ldr	r3, [pc, #276]	@ (8000eb4 <main+0x940>)
 8000d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <main+0x840>
					  HAL_TIM_Base_Start(&htim6);
 8000da6:	4844      	ldr	r0, [pc, #272]	@ (8000eb8 <main+0x944>)
 8000da8:	f002 f9ce 	bl	8003148 <HAL_TIM_Base_Start>
					  state=0;
 8000dac:	4b43      	ldr	r3, [pc, #268]	@ (8000ebc <main+0x948>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e002      	b.n	8000dba <main+0x846>
				  }
				  else {
					  state=3;
 8000db4:	4b41      	ldr	r3, [pc, #260]	@ (8000ebc <main+0x948>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	701a      	strb	r2, [r3, #0]
				  }
			  }

			  if(message[0]=='c' && message[1]=='c') {
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <main+0x94c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b63      	cmp	r3, #99	@ 0x63
 8000dc0:	d164      	bne.n	8000e8c <main+0x918>
 8000dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <main+0x94c>)
 8000dc4:	785b      	ldrb	r3, [r3, #1]
 8000dc6:	2b63      	cmp	r3, #99	@ 0x63
 8000dc8:	d160      	bne.n	8000e8c <main+0x918>
//				  if(message[0]=='c' && message[1]=='c') {
					  //setPoint equals to the value in the LUT from position 0 to 255:
					  setLightPoint = CCRtable[light];
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <main+0x950>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec8 <main+0x954>)
 8000dd2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <main+0x958>)
 8000dd8:	801a      	strh	r2, [r3, #0]
					  lightslope = setLightPoint - currentLightPoint;
 8000dda:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <main+0x958>)
 8000ddc:	881a      	ldrh	r2, [r3, #0]
 8000dde:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed0 <main+0x95c>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <main+0x960>)
 8000dea:	801a      	strh	r2, [r3, #0]
					  //Limit the values of the slope
					  if(lightslope>maxSlope) {
 8000dec:	4b39      	ldr	r3, [pc, #228]	@ (8000ed4 <main+0x960>)
 8000dee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000df2:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <main+0x964>)
 8000df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dd05      	ble.n	8000e08 <main+0x894>
						  lightslope=maxSlope;
 8000dfc:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <main+0x964>)
 8000dfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <main+0x960>)
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	e00f      	b.n	8000e28 <main+0x8b4>
					  }
					  else if (slope[i]<minSlope) {
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <main+0x924>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <main+0x928>)
 8000e10:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <main+0x92c>)
 8000e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	da04      	bge.n	8000e28 <main+0x8b4>
						  lightslope=minSlope;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <main+0x92c>)
 8000e20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <main+0x960>)
 8000e26:	801a      	strh	r2, [r3, #0]
					  }
					  //Values to send:
					  currentLightPoint = currentLightPoint + lightslope;
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <main+0x95c>)
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ed4 <main+0x960>)
 8000e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <main+0x95c>)
 8000e3a:	801a      	strh	r2, [r3, #0]

					  // Send light values
					  TIM3->CCR3 = currentLightPoint;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <main+0x95c>)
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <main+0x938>)
 8000e42:	63da      	str	r2, [r3, #60]	@ 0x3c
					  // Send the camera values
					  TIM4->CCR3 = CamCCRtable[camera]; // Camera CCR value to send
 8000e44:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <main+0x968>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <main+0x96c>)
 8000e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <main+0x970>)
 8000e52:	63da      	str	r2, [r3, #60]	@ 0x3c
//					  TIM4->EGR |= TIM_EGR_UG;  // Generate an update event to reload ARR & CCR to update the changess

					  HAL_Delay(200);
 8000e54:	20c8      	movs	r0, #200	@ 0xc8
 8000e56:	f000 fec5 	bl	8001be4 <HAL_Delay>
					  error=0;	//Reset error
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <main+0x940>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	801a      	strh	r2, [r3, #0]

//					  error = error + lightslope;
					  //When all setPoints are achieved return to initial state:
					  if(error==0) {
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <main+0x940>)
 8000e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <main+0x904>
						  HAL_TIM_Base_Start(&htim6);
 8000e6a:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <main+0x944>)
 8000e6c:	f002 f96c 	bl	8003148 <HAL_TIM_Base_Start>
						  state=0;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <main+0x948>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
					  else {
						  state=3;
					  }
			  }

		  break;
 8000e76:	e009      	b.n	8000e8c <main+0x918>
						  state=3;
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <main+0x948>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	701a      	strb	r2, [r3, #0]
		  break;
 8000e7e:	e005      	b.n	8000e8c <main+0x918>
		  break;
 8000e80:	bf00      	nop
 8000e82:	f7ff bbd8 	b.w	8000636 <main+0xc2>
		  break;
 8000e86:	bf00      	nop
 8000e88:	f7ff bbd5 	b.w	8000636 <main+0xc2>
		  break;
 8000e8c:	bf00      	nop
 8000e8e:	f7ff bbd2 	b.w	8000636 <main+0xc2>
	switch(state) {
 8000e92:	f7ff bbd0 	b.w	8000636 <main+0xc2>
 8000e96:	bf00      	nop
 8000e98:	20000561 	.word	0x20000561
 8000e9c:	200005a8 	.word	0x200005a8
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	40014400 	.word	0x40014400
 8000eac:	40000400 	.word	0x40000400
 8000eb0:	40014800 	.word	0x40014800
 8000eb4:	200005b6 	.word	0x200005b6
 8000eb8:	2000039c 	.word	0x2000039c
 8000ebc:	20000560 	.word	0x20000560
 8000ec0:	20000564 	.word	0x20000564
 8000ec4:	200005bb 	.word	0x200005bb
 8000ec8:	20000014 	.word	0x20000014
 8000ecc:	200005a4 	.word	0x200005a4
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	200005b4 	.word	0x200005b4
 8000ed8:	2000000e 	.word	0x2000000e
 8000edc:	200005bc 	.word	0x200005bc
 8000ee0:	20000214 	.word	0x20000214
 8000ee4:	40000800 	.word	0x40000800

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	@ 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	2238      	movs	r2, #56	@ 0x38
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 f986 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f001 f8f2 	bl	80020f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1a:	2340      	movs	r3, #64	@ 0x40
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f22:	2302      	movs	r3, #2
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f2a:	2355      	movs	r3, #85	@ 0x55
 8000f2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 0318 	add.w	r3, r7, #24
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 f98c 	bl	800225c <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f4a:	f000 fb73 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2303      	movs	r3, #3
 8000f54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2104      	movs	r1, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 fc8a 	bl	8002880 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f72:	f000 fb5f 	bl	8001634 <Error_Handler>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3750      	adds	r7, #80	@ 0x50
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	@ 0x38
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb2:	4b32      	ldr	r3, [pc, #200]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800000;
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001080 <MX_TIM2_Init+0x100>)
 8000fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd8:	4828      	ldr	r0, [pc, #160]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000fda:	f002 f85d 	bl	8003098 <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000fe4:	f000 fb26 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4821      	ldr	r0, [pc, #132]	@ (800107c <MX_TIM2_Init+0xfc>)
 8000ff6:	f002 fba5 	bl	8003744 <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001000:	f000 fb18 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <MX_TIM2_Init+0xfc>)
 8001006:	f002 f928 	bl	800325a <HAL_TIM_PWM_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001010:	f000 fb10 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	@ (800107c <MX_TIM2_Init+0xfc>)
 8001024:	f003 f8dc 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800102e:	f000 fb01 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001032:	2360      	movs	r3, #96	@ 0x60
 8001034:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <MX_TIM2_Init+0xfc>)
 800104a:	f002 fa67 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001054:	f000 faee 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	2204      	movs	r2, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4807      	ldr	r0, [pc, #28]	@ (800107c <MX_TIM2_Init+0xfc>)
 8001060:	f002 fa5c 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800106a:	f000 fae3 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <MX_TIM2_Init+0xfc>)
 8001070:	f000 fba0 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	@ 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200002b8 	.word	0x200002b8
 8001080:	000c3500 	.word	0x000c3500

08001084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	@ 0x38
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	615a      	str	r2, [r3, #20]
 80010b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010b8:	4a38      	ldr	r2, [pc, #224]	@ (800119c <MX_TIM3_Init+0x118>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010be:	2207      	movs	r2, #7
 80010c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 53124;
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010ca:	f64c 7284 	movw	r2, #53124	@ 0xcf84
 80010ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d6:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010d8:	2280      	movs	r2, #128	@ 0x80
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010dc:	482e      	ldr	r0, [pc, #184]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010de:	f001 ffdb 	bl	8003098 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010e8:	f000 faa4 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4827      	ldr	r0, [pc, #156]	@ (8001198 <MX_TIM3_Init+0x114>)
 80010fa:	f002 fb23 	bl	8003744 <HAL_TIM_ConfigClockSource>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001104:	f000 fa96 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001108:	4823      	ldr	r0, [pc, #140]	@ (8001198 <MX_TIM3_Init+0x114>)
 800110a:	f002 f8a6 	bl	800325a <HAL_TIM_PWM_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001114:	f000 fa8e 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	481c      	ldr	r0, [pc, #112]	@ (8001198 <MX_TIM3_Init+0x114>)
 8001128:	f003 f85a 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001132:	f000 fa7f 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2360      	movs	r3, #96	@ 0x60
 8001138:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4812      	ldr	r0, [pc, #72]	@ (8001198 <MX_TIM3_Init+0x114>)
 800114e:	f002 f9e5 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001158:	f000 fa6c 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2204      	movs	r2, #4
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM3_Init+0x114>)
 8001164:	f002 f9da 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800116e:	f000 fa61 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2208      	movs	r2, #8
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM3_Init+0x114>)
 800117a:	f002 f9cf 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001184:	f000 fa56 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM3_Init+0x114>)
 800118a:	f000 fb13 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	@ 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000304 	.word	0x20000304
 800119c:	40000400 	.word	0x40000400

080011a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	@ (800128c <MX_TIM4_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011da:	2207      	movs	r2, #7
 80011dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 53124;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011e6:	f64c 7284 	movw	r2, #53124	@ 0xcf84
 80011ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	@ (8001288 <MX_TIM4_Init+0xe8>)
 80011fa:	f001 ff4d 	bl	8003098 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fa16 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <MX_TIM4_Init+0xe8>)
 8001216:	f002 fa95 	bl	8003744 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fa08 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM4_Init+0xe8>)
 8001226:	f002 f818 	bl	800325a <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fa00 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM4_Init+0xe8>)
 8001244:	f002 ffcc 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 f9f1 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM4_Init+0xe8>)
 800126a:	f002 f957 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 f9de 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM4_Init+0xe8>)
 800127a:	f000 fa9b 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000350 	.word	0x20000350
 800128c:	40000800 	.word	0x40000800

08001290 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012a2:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7782;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012a8:	f641 6266 	movw	r2, #7782	@ 0x1e66
 80012ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012c2:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012c4:	f001 fee8 	bl	8003098 <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012ce:	f000 f9b1 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	@ (80012f8 <MX_TIM6_Init+0x68>)
 80012e0:	f002 ff7e 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f000 f9a3 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000039c 	.word	0x2000039c
 80012fc:	40001000 	.word	0x40001000

08001300 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_TIM7_Init+0x64>)
 8001312:	4a15      	ldr	r2, [pc, #84]	@ (8001368 <MX_TIM7_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200;
 8001316:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <MX_TIM7_Init+0x64>)
 8001318:	22c8      	movs	r2, #200	@ 0xc8
 800131a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_TIM7_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_TIM7_Init+0x64>)
 8001324:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001328:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <MX_TIM7_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <MX_TIM7_Init+0x64>)
 8001332:	f001 feb1 	bl	8003098 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800133c:	f000 f97a 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_TIM7_Init+0x64>)
 800134e:	f002 ff47 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001358:	f000 f96c 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200003e8 	.word	0x200003e8
 8001368:	40001400 	.word	0x40001400

0800136c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2234      	movs	r2, #52	@ 0x34
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f003 ff3b 	bl	8005208 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <MX_TIM16_Init+0xec>)
 8001394:	4a31      	ldr	r2, [pc, #196]	@ (800145c <MX_TIM16_Init+0xf0>)
 8001396:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8001398:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_TIM16_Init+0xec>)
 800139a:	2207      	movs	r2, #7
 800139c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 53124;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013a6:	f64c 7284 	movw	r2, #53124	@ 0xcf84
 80013aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013b2:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013ba:	2280      	movs	r2, #128	@ 0x80
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013be:	4826      	ldr	r0, [pc, #152]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013c0:	f001 fe6a 	bl	8003098 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80013ca:	f000 f933 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80013ce:	4822      	ldr	r0, [pc, #136]	@ (8001458 <MX_TIM16_Init+0xec>)
 80013d0:	f001 ff43 	bl	800325a <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80013da:	f000 f92b 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4815      	ldr	r0, [pc, #84]	@ (8001458 <MX_TIM16_Init+0xec>)
 8001404:	f002 f88a 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800140e:	f000 f911 	bl	8001634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	@ (8001458 <MX_TIM16_Init+0xec>)
 800143a:	f002 ff53 	bl	80042e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001444:	f000 f8f6 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <MX_TIM16_Init+0xec>)
 800144a:	f000 f9b3 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	@ 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000434 	.word	0x20000434
 800145c:	40014400 	.word	0x40014400

08001460 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2234      	movs	r2, #52	@ 0x34
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fec1 	bl	8005208 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001486:	4b31      	ldr	r3, [pc, #196]	@ (800154c <MX_TIM17_Init+0xec>)
 8001488:	4a31      	ldr	r2, [pc, #196]	@ (8001550 <MX_TIM17_Init+0xf0>)
 800148a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 800148c:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <MX_TIM17_Init+0xec>)
 800148e:	2207      	movs	r2, #7
 8001490:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <MX_TIM17_Init+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 53124;
 8001498:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <MX_TIM17_Init+0xec>)
 800149a:	f64c 7284 	movw	r2, #53124	@ 0xcf84
 800149e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <MX_TIM17_Init+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <MX_TIM17_Init+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <MX_TIM17_Init+0xec>)
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014b2:	4826      	ldr	r0, [pc, #152]	@ (800154c <MX_TIM17_Init+0xec>)
 80014b4:	f001 fdf0 	bl	8003098 <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80014be:	f000 f8b9 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80014c2:	4822      	ldr	r0, [pc, #136]	@ (800154c <MX_TIM17_Init+0xec>)
 80014c4:	f001 fec9 	bl	800325a <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80014ce:	f000 f8b1 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	@ 0x60
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4815      	ldr	r0, [pc, #84]	@ (800154c <MX_TIM17_Init+0xec>)
 80014f8:	f002 f810 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001502:	f000 f897 	bl	8001634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM17_Init+0xec>)
 800152e:	f002 fed9 	bl	80042e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001538:	f000 f87c 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM17_Init+0xec>)
 800153e:	f000 f939 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	@ 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000480 	.word	0x20000480
 8001550:	40014800 	.word	0x40014800

08001554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <MX_USART2_UART_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001560:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800159e:	f002 ff2d 	bl	80043fc <HAL_UART_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015a8:	f000 f844 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 80015b0:	f003 fd60 	bl	8005074 <HAL_UARTEx_SetTxFifoThreshold>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f000 f83b 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 80015c2:	f003 fd95 	bl	80050f0 <HAL_UARTEx_SetRxFifoThreshold>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015cc:	f000 f832 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 80015d2:	f003 fd16 	bl	8005002 <HAL_UARTEx_DisableFifoMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f000 f82a 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200004cc 	.word	0x200004cc
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_GPIO_Init+0x44>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <MX_GPIO_Init+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_GPIO_Init+0x44>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_GPIO_Init+0x44>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <MX_GPIO_Init+0x44>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_GPIO_Init+0x44>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <Error_Handler+0x8>

08001640 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_MspInit+0x44>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_MspInit+0x44>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6613      	str	r3, [r2, #96]	@ 0x60
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6593      	str	r3, [r2, #88]	@ 0x58
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001676:	f000 fde1 	bl	800223c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b480      	push	{r7}
 800168a:	b08b      	sub	sp, #44	@ 0x2c
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001698:	d10c      	bne.n	80016b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	4a3e      	ldr	r2, [pc, #248]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80016b2:	e06a      	b.n	800178a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a38      	ldr	r2, [pc, #224]	@ (800179c <HAL_TIM_Base_MspInit+0x114>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10c      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	4a35      	ldr	r2, [pc, #212]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ca:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
}
 80016d6:	e058      	b.n	800178a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a30      	ldr	r2, [pc, #192]	@ (80017a0 <HAL_TIM_Base_MspInit+0x118>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10c      	bne.n	80016fc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
}
 80016fa:	e046      	b.n	800178a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a28      	ldr	r2, [pc, #160]	@ (80017a4 <HAL_TIM_Base_MspInit+0x11c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10c      	bne.n	8001720 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a23      	ldr	r2, [pc, #140]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
}
 800171e:	e034      	b.n	800178a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM7)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a20      	ldr	r2, [pc, #128]	@ (80017a8 <HAL_TIM_Base_MspInit+0x120>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10c      	bne.n	8001744 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	4a1a      	ldr	r2, [pc, #104]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	6593      	str	r3, [r2, #88]	@ 0x58
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
}
 8001742:	e022      	b.n	800178a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM16)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_TIM_Base_MspInit+0x124>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10c      	bne.n	8001768 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001758:	6613      	str	r3, [r2, #96]	@ 0x60
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
}
 8001766:	e010      	b.n	800178a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM17)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_TIM_Base_MspInit+0x128>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6613      	str	r3, [r2, #96]	@ 0x60
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_TIM_Base_MspInit+0x110>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
}
 800178a:	bf00      	nop
 800178c:	372c      	adds	r7, #44	@ 0x2c
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800
 80017a4:	40001000 	.word	0x40001000
 80017a8:	40001400 	.word	0x40001400
 80017ac:	40014400 	.word	0x40014400
 80017b0:	40014800 	.word	0x40014800

080017b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	@ 0x38
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017d4:	d11d      	bne.n	8001812 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	4a62      	ldr	r2, [pc, #392]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e2:	4b60      	ldr	r3, [pc, #384]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin;
 80017ee:	2303      	movs	r3, #3
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017fe:	2301      	movs	r3, #1
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180c:	f000 faf0 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001810:	e0a4      	b.n	800195c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM3)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a54      	ldr	r2, [pc, #336]	@ (8001968 <HAL_TIM_MspPostInit+0x1b4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d139      	bne.n	8001890 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b51      	ldr	r3, [pc, #324]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001828:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b4b      	ldr	r3, [pc, #300]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	4a4a      	ldr	r2, [pc, #296]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001840:	4b48      	ldr	r3, [pc, #288]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Motor4_Pin|Motor5_Pin;
 800184c:	2350      	movs	r3, #80	@ 0x50
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185c:	2302      	movs	r3, #2
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186a:	f000 fac1 	bl	8001df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Lights_Pin;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187e:	2302      	movs	r3, #2
 8001880:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Lights_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	4838      	ldr	r0, [pc, #224]	@ (800196c <HAL_TIM_MspPostInit+0x1b8>)
 800188a:	f000 fab1 	bl	8001df0 <HAL_GPIO_Init>
}
 800188e:	e065      	b.n	800195c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM4)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a36      	ldr	r2, [pc, #216]	@ (8001970 <HAL_TIM_MspPostInit+0x1bc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d11c      	bne.n	80018d4 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Cameras_Pin;
 80018b2:	2340      	movs	r3, #64	@ 0x40
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018c2:	2302      	movs	r3, #2
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Cameras_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4827      	ldr	r0, [pc, #156]	@ (800196c <HAL_TIM_MspPostInit+0x1b8>)
 80018ce:	f000 fa8f 	bl	8001df0 <HAL_GPIO_Init>
}
 80018d2:	e043      	b.n	800195c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM16)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a26      	ldr	r2, [pc, #152]	@ (8001974 <HAL_TIM_MspPostInit+0x1c0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d11c      	bne.n	8001918 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Motor3_Pin;
 80018f6:	2310      	movs	r3, #16
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001906:	2301      	movs	r3, #1
 8001908:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Motor3_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	4816      	ldr	r0, [pc, #88]	@ (800196c <HAL_TIM_MspPostInit+0x1b8>)
 8001912:	f000 fa6d 	bl	8001df0 <HAL_GPIO_Init>
}
 8001916:	e021      	b.n	800195c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM17)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <HAL_TIM_MspPostInit+0x1c4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d11c      	bne.n	800195c <HAL_TIM_MspPostInit+0x1a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_TIM_MspPostInit+0x1b0>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor6_Pin;
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800194a:	2301      	movs	r3, #1
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Motor6_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f000 fa4a 	bl	8001df0 <HAL_GPIO_Init>
}
 800195c:	bf00      	nop
 800195e:	3738      	adds	r7, #56	@ 0x38
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	40000400 	.word	0x40000400
 800196c:	48000400 	.word	0x48000400
 8001970:	40000800 	.word	0x40000800
 8001974:	40014400 	.word	0x40014400
 8001978:	40014800 	.word	0x40014800

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b09a      	sub	sp, #104	@ 0x68
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2244      	movs	r2, #68	@ 0x44
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fc33 	bl	8005208 <memset>
  if(huart->Instance==USART2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_UART_MspInit+0xa8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d136      	bne.n	8001a1a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 f97d 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c4:	f7ff fe36 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 80019ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_UART_MspInit+0xac>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3;
 80019f8:	230c      	movs	r3, #12
 80019fa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a16:	f000 f9eb 	bl	8001df0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3768      	adds	r7, #104	@ 0x68
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40004400 	.word	0x40004400
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f891 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f7ff ffea 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f003 fb9b 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae2:	f7fe fd47 	bl	8000574 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8001af4:	080052c8 	.word	0x080052c8
  ldr r2, =_sbss
 8001af8:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8001afc:	200005c4 	.word	0x200005c4

08001b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_2_IRQHandler>

08001b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f93d 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 f80e 	bl	8001b34 <HAL_InitTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	e001      	b.n	8001b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b24:	f7ff fd8c 	bl	8001640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b28:	79fb      	ldrb	r3, [r7, #7]

}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_InitTick+0x68>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d022      	beq.n	8001b8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_InitTick+0x6c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_InitTick+0x68>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f93a 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10f      	bne.n	8001b88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	d809      	bhi.n	8001b82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	f04f 30ff 	mov.w	r0, #4294967295
 8001b76:	f000 f914 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_InitTick+0x70>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e004      	b.n	8001b92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000298 	.word	0x20000298
 8001ba0:	20000290 	.word	0x20000290
 8001ba4:	20000294 	.word	0x20000294

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a03      	ldr	r2, [pc, #12]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	200005c0 	.word	0x200005c0
 8001bc8:	20000298 	.word	0x20000298

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	200005c0 	.word	0x200005c0

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff ffee 	bl	8001bcc <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d004      	beq.n	8001c08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_Delay+0x40>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4413      	add	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c08:	bf00      	nop
 8001c0a:	f7ff ffdf 	bl	8001bcc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d8f7      	bhi.n	8001c0a <HAL_Delay+0x26>
  {
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000298 	.word	0x20000298

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff47 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff5e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffb2 	bl	8001d48 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dfe:	e15a      	b.n	80020b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2101      	movs	r1, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 814c 	beq.w	80020b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d005      	beq.n	8001e30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d130      	bne.n	8001e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e66:	2201      	movs	r2, #1
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 0201 	and.w	r2, r3, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d017      	beq.n	8001ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d123      	bne.n	8001f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	6939      	ldr	r1, [r7, #16]
 8001f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0203 	and.w	r2, r3, #3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a6 	beq.w	80020b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f64:	4b5b      	ldr	r3, [pc, #364]	@ (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f68:	4a5a      	ldr	r2, [pc, #360]	@ (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f70:	4b58      	ldr	r3, [pc, #352]	@ (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7c:	4a56      	ldr	r2, [pc, #344]	@ (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fa6:	d01f      	beq.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a4c      	ldr	r2, [pc, #304]	@ (80020dc <HAL_GPIO_Init+0x2ec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d019      	beq.n	8001fe4 <HAL_GPIO_Init+0x1f4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a4b      	ldr	r2, [pc, #300]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_GPIO_Init+0x1f0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <HAL_GPIO_Init+0x2f4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a49      	ldr	r2, [pc, #292]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a48      	ldr	r2, [pc, #288]	@ (80020ec <HAL_GPIO_Init+0x2fc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fd0:	2305      	movs	r3, #5
 8001fd2:	e00a      	b.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fd4:	2306      	movs	r3, #6
 8001fd6:	e008      	b.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e004      	b.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffa:	4937      	ldr	r1, [pc, #220]	@ (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002008:	4b39      	ldr	r3, [pc, #228]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800202c:	4a30      	ldr	r2, [pc, #192]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002032:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002056:	4a26      	ldr	r2, [pc, #152]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800205c:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020aa:	4a11      	ldr	r2, [pc, #68]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f ae9d 	bne.w	8001e00 <HAL_GPIO_Init+0x10>
  }
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	48000800 	.word	0x48000800
 80020e4:	48000c00 	.word	0x48000c00
 80020e8:	48001000 	.word	0x48001000
 80020ec:	48001400 	.word	0x48001400
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d141      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002102:	4b4b      	ldr	r3, [pc, #300]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210e:	d131      	bne.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002110:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002116:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800211c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002120:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002128:	4a41      	ldr	r2, [pc, #260]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002130:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2232      	movs	r2, #50	@ 0x32
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a3f      	ldr	r2, [pc, #252]	@ (8002238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002146:	e002      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b01      	subs	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d102      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f2      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002162:	4b33      	ldr	r3, [pc, #204]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216e:	d158      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e057      	b.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002174:	4b2e      	ldr	r3, [pc, #184]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217a:	4a2d      	ldr	r2, [pc, #180]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002184:	e04d      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218c:	d141      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800218e:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219a:	d131      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021a2:	4a23      	ldr	r2, [pc, #140]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2232      	movs	r2, #50	@ 0x32
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9b      	lsrs	r3, r3, #18
 80021ce:	3301      	adds	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d2:	e002      	b.n	80021da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e6:	d102      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f2      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fa:	d112      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e011      	b.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002210:	e007      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002220:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40007000 	.word	0x40007000
 8002234:	20000290 	.word	0x20000290
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800224a:	6093      	str	r3, [r2, #8]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e2fe      	b.n	800286c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d075      	beq.n	8002366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b97      	ldr	r3, [pc, #604]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d102      	bne.n	800229a <HAL_RCC_OscConfig+0x3e>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_OscConfig+0x44>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d10b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	4b8d      	ldr	r3, [pc, #564]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <HAL_RCC_OscConfig+0x108>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d157      	bne.n	8002364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2d9      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x74>
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a84      	ldr	r2, [pc, #528]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x98>
 80022da:	4b7f      	ldr	r3, [pc, #508]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7e      	ldr	r2, [pc, #504]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b7c      	ldr	r3, [pc, #496]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7b      	ldr	r2, [pc, #492]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022f4:	4b78      	ldr	r3, [pc, #480]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a77      	ldr	r2, [pc, #476]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b75      	ldr	r3, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a74      	ldr	r2, [pc, #464]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff fc5a 	bl	8001bcc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fc56 	bl	8001bcc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	@ 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e29e      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232e:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xc0>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff fc46 	bl	8001bcc <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7ff fc42 	bl	8001bcc <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	@ 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e28a      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002356:	4b60      	ldr	r3, [pc, #384]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0xe8>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d075      	beq.n	800245e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4b59      	ldr	r3, [pc, #356]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	4b56      	ldr	r3, [pc, #344]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0x136>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d002      	beq.n	8002398 <HAL_RCC_OscConfig+0x13c>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11f      	bne.n	80023d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	4b4f      	ldr	r3, [pc, #316]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x154>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e25d      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	4946      	ldr	r1, [pc, #280]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023c4:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <HAL_RCC_OscConfig+0x280>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fbb3 	bl	8001b34 <HAL_InitTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d043      	beq.n	800245c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e249      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3c      	ldr	r2, [pc, #240]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fbee 	bl	8001bcc <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fbea 	bl	8001bcc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e232      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	061b      	lsls	r3, r3, #24
 8002420:	492d      	ldr	r1, [pc, #180]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
 8002426:	e01a      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002428:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800242e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff fbca 	bl	8001bcc <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff fbc6 	bl	8001bcc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e20e      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244e:	4b22      	ldr	r3, [pc, #136]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1e0>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d041      	beq.n	80024ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01c      	beq.n	80024ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002478:	4a17      	ldr	r2, [pc, #92]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff fba3 	bl	8001bcc <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7ff fb9f 	bl	8001bcc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1e7      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249c:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ef      	beq.n	800248a <HAL_RCC_OscConfig+0x22e>
 80024aa:	e020      	b.n	80024ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7ff fb86 	bl	8001bcc <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c2:	e00d      	b.n	80024e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fb82 	bl	8001bcc <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d906      	bls.n	80024e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1ca      	b.n	800286c <HAL_RCC_OscConfig+0x610>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	20000294 	.word	0x20000294
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ea      	bne.n	80024c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80a6 	beq.w	8002648 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002500:	4b84      	ldr	r3, [pc, #528]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x2b4>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x2b6>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b7f      	ldr	r3, [pc, #508]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	4a7e      	ldr	r2, [pc, #504]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	@ 0x58
 8002522:	4b7c      	ldr	r3, [pc, #496]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b79      	ldr	r3, [pc, #484]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253e:	4b76      	ldr	r3, [pc, #472]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7ff fb3f 	bl	8001bcc <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7ff fb3b 	bl	8001bcc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e183      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002564:	4b6c      	ldr	r3, [pc, #432]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_RCC_OscConfig+0x32e>
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002588:	e024      	b.n	80025d4 <HAL_RCC_OscConfig+0x378>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d110      	bne.n	80025b4 <HAL_RCC_OscConfig+0x358>
 8002592:	4b60      	ldr	r3, [pc, #384]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	4a5e      	ldr	r2, [pc, #376]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x378>
 80025b4:	4b57      	ldr	r3, [pc, #348]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	4a52      	ldr	r2, [pc, #328]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff faf6 	bl	8001bcc <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7ff faf2 	bl	8001bcc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e138      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ed      	beq.n	80025e4 <HAL_RCC_OscConfig+0x388>
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7ff fadf 	bl	8001bcc <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7ff fadb 	bl	8001bcc <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e121      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002628:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ed      	bne.n	8002612 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002636:	7ffb      	ldrb	r3, [r7, #31]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	4a34      	ldr	r2, [pc, #208]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03c      	beq.n	80026ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800265c:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002662:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff faae 	bl	8001bcc <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002674:	f7ff faaa 	bl	8001bcc <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0f2      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002686:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCC_OscConfig+0x418>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7ff fa91 	bl	8001bcc <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ae:	f7ff fa8d 	bl	8001bcc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0d5      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ef      	bne.n	80026ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80c9 	beq.w	800286a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	f000 8083 	beq.w	80027ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d15e      	bne.n	80027ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a08      	ldr	r2, [pc, #32]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff fa67 	bl	8001bcc <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	e00c      	b.n	800271c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff fa63 	bl	8001bcc <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d905      	bls.n	800271c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0ab      	b.n	800286c <HAL_RCC_OscConfig+0x610>
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	4b55      	ldr	r3, [pc, #340]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ec      	bne.n	8002702 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4b52      	ldr	r3, [pc, #328]	@ (8002878 <HAL_RCC_OscConfig+0x61c>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6a11      	ldr	r1, [r2, #32]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002738:	3a01      	subs	r2, #1
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002742:	0212      	lsls	r2, r2, #8
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800274a:	0852      	lsrs	r2, r2, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	0552      	lsls	r2, r2, #21
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002756:	0852      	lsrs	r2, r2, #1
 8002758:	3a01      	subs	r2, #1
 800275a:	0652      	lsls	r2, r2, #25
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002762:	06d2      	lsls	r2, r2, #27
 8002764:	430a      	orrs	r2, r1
 8002766:	4943      	ldr	r1, [pc, #268]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a40      	ldr	r2, [pc, #256]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002778:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff fa22 	bl	8001bcc <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7ff fa1e 	bl	8001bcc <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e066      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b35      	ldr	r3, [pc, #212]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x530>
 80027aa:	e05e      	b.n	800286a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a30      	ldr	r2, [pc, #192]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff fa08 	bl	8001bcc <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7ff fa04 	bl	8001bcc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e04c      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d2:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	4924      	ldr	r1, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_RCC_OscConfig+0x620>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60cb      	str	r3, [r1, #12]
 80027ea:	e03e      	b.n	800286a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e039      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0203 	and.w	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	429a      	cmp	r2, r3
 800280a:	d12c      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	3b01      	subs	r3, #1
 8002818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d123      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d11b      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d113      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d109      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	019f800c 	.word	0x019f800c
 800287c:	feeefffc 	.word	0xfeeefffc

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e11e      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b91      	ldr	r3, [pc, #580]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	498c      	ldr	r1, [pc, #560]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e106      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d073      	beq.n	80029bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d129      	bne.n	8002930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028dc:	4b81      	ldr	r3, [pc, #516]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0f4      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028ec:	f000 f99e 	bl	8002c2c <RCC_GetSysClockFreqFromPLLSource>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <HAL_RCC_ClockConfig+0x268>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d93f      	bls.n	800297a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028fa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800290e:	2b00      	cmp	r3, #0
 8002910:	d033      	beq.n	800297a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d12f      	bne.n	800297a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800291a:	4b72      	ldr	r3, [pc, #456]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002922:	4a70      	ldr	r2, [pc, #448]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e024      	b.n	800297a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002938:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0c6      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0be      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002958:	f000 f8ce 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 800295c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_RCC_ClockConfig+0x268>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d909      	bls.n	800297a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002966:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800296e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002974:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4957      	ldr	r1, [pc, #348]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7ff f91e 	bl	8001bcc <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff f91a 	bl	8001bcc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e095      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d023      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b43      	ldr	r3, [pc, #268]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a42      	ldr	r2, [pc, #264]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029ec:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029f4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4936      	ldr	r1, [pc, #216]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a16:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d21d      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 020f 	bic.w	r2, r3, #15
 8002a38:	4929      	ldr	r1, [pc, #164]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a40:	f7ff f8c4 	bl	8001bcc <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7ff f8c0 	bl	8001bcc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e03b      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1ed      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4917      	ldr	r1, [pc, #92]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490f      	ldr	r1, [pc, #60]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aaa:	f000 f825 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490c      	ldr	r1, [pc, #48]	@ (8002aec <HAL_RCC_ClockConfig+0x26c>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <HAL_RCC_ClockConfig+0x270>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_RCC_ClockConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f830 	bl	8001b34 <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	04c4b400 	.word	0x04c4b400
 8002aec:	08005278 	.word	0x08005278
 8002af0:	20000290 	.word	0x20000290
 8002af4:	20000294 	.word	0x20000294

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002afe:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	e047      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b10:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b1c:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e03e      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b22:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d136      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3301      	adds	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	68d2      	ldr	r2, [r2, #12]
 8002b58:	0a12      	lsrs	r2, r2, #8
 8002b5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
      break;
 8002b64:	e00c      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b66:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	0a12      	lsrs	r2, r2, #8
 8002b74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
      break;
 8002b7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0e5b      	lsrs	r3, r3, #25
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e001      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ba0:	693b      	ldr	r3, [r7, #16]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000290 	.word	0x20000290

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bd8:	f7ff fff0 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08005288 	.word	0x08005288

08002c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c04:	f7ff ffda 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0adb      	lsrs	r3, r3, #11
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4904      	ldr	r1, [pc, #16]	@ (8002c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08005288 	.word	0x08005288

08002c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3301      	adds	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d10c      	bne.n	8002c6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c50:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5a:	68d2      	ldr	r2, [r2, #12]
 8002c5c:	0a12      	lsrs	r2, r2, #8
 8002c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
    break;
 8002c68:	e00c      	b.n	8002c84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	0a12      	lsrs	r2, r2, #8
 8002c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    break;
 8002c82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0e5b      	lsrs	r3, r3, #25
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c9e:	687b      	ldr	r3, [r7, #4]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	00f42400 	.word	0x00f42400

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8098 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe ff5d 	bl	8001bcc <HAL_GetTick>
 8002d12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d14:	e009      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe ff59 	bl	8001bcc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d902      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	74fb      	strb	r3, [r7, #19]
        break;
 8002d28:	e005      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2a:	4b30      	ldr	r3, [pc, #192]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ef      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d159      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d019      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d74:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe ff19 	bl	8001bcc <HAL_GetTick>
 8002d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9c:	e00b      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe ff15 	bl	8001bcc <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d902      	bls.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	74fb      	strb	r3, [r7, #19]
            break;
 8002db4:	e006      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ec      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4903      	ldr	r1, [pc, #12]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002de0:	e008      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	74bb      	strb	r3, [r7, #18]
 8002de6:	e005      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4ba6      	ldr	r3, [pc, #664]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	4aa5      	ldr	r2, [pc, #660]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4ba0      	ldr	r3, [pc, #640]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f023 0203 	bic.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	499c      	ldr	r1, [pc, #624]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e34:	4b97      	ldr	r3, [pc, #604]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 020c 	bic.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4994      	ldr	r1, [pc, #592]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e56:	4b8f      	ldr	r3, [pc, #572]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	498b      	ldr	r1, [pc, #556]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e78:	4b86      	ldr	r3, [pc, #536]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4983      	ldr	r1, [pc, #524]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	497a      	ldr	r1, [pc, #488]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebc:	4b75      	ldr	r3, [pc, #468]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	4972      	ldr	r1, [pc, #456]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ede:	4b6d      	ldr	r3, [pc, #436]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	4969      	ldr	r1, [pc, #420]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f00:	4b64      	ldr	r3, [pc, #400]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4961      	ldr	r1, [pc, #388]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f22:	4b5c      	ldr	r3, [pc, #368]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	4958      	ldr	r1, [pc, #352]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f44:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	4950      	ldr	r1, [pc, #320]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f62:	d105      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f64:	4b4b      	ldr	r3, [pc, #300]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d015      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f7c:	4b45      	ldr	r3, [pc, #276]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	4942      	ldr	r1, [pc, #264]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fb4:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4934      	ldr	r1, [pc, #208]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fec:	4b29      	ldr	r3, [pc, #164]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	4926      	ldr	r1, [pc, #152]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800300a:	d105      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300c:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a20      	ldr	r2, [pc, #128]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003016:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	4918      	ldr	r1, [pc, #96]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800305c:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	490a      	ldr	r1, [pc, #40]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800307a:	d105      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003088:	7cbb      	ldrb	r3, [r7, #18]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e049      	b.n	800313e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fae2 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fc2e 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d001      	beq.n	8003160 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e042      	b.n	80031e6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <HAL_TIM_Base_Start+0xac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d018      	beq.n	80031a4 <HAL_TIM_Base_Start+0x5c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317a:	d013      	beq.n	80031a4 <HAL_TIM_Base_Start+0x5c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <HAL_TIM_Base_Start+0xb0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_TIM_Base_Start+0x5c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <HAL_TIM_Base_Start+0xb4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_TIM_Base_Start+0x5c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_TIM_Base_Start+0xb8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_TIM_Base_Start+0x5c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_TIM_Base_Start+0xbc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d115      	bne.n	80031d0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	4b17      	ldr	r3, [pc, #92]	@ (8003208 <HAL_TIM_Base_Start+0xc0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d015      	beq.n	80031e2 <HAL_TIM_Base_Start+0x9a>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031bc:	d011      	beq.n	80031e2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	e008      	b.n	80031e2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e000      	b.n	80031e4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800
 8003200:	40013400 	.word	0x40013400
 8003204:	40014000 	.word	0x40014000
 8003208:	00010007 	.word	0x00010007

0800320c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a1a      	ldr	r2, [r3, #32]
 800321a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10f      	bne.n	8003244 <HAL_TIM_Base_Stop+0x38>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_TIM_Base_Stop+0x38>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e049      	b.n	8003300 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f841 	bl	8003308 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 fb4d 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_TIM_PWM_Start+0x24>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e03c      	b.n	80033ba <HAL_TIM_PWM_Start+0x9e>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d109      	bne.n	800335a <HAL_TIM_PWM_Start+0x3e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	bf14      	ite	ne
 8003352:	2301      	movne	r3, #1
 8003354:	2300      	moveq	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	e02f      	b.n	80033ba <HAL_TIM_PWM_Start+0x9e>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d109      	bne.n	8003374 <HAL_TIM_PWM_Start+0x58>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e022      	b.n	80033ba <HAL_TIM_PWM_Start+0x9e>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d109      	bne.n	800338e <HAL_TIM_PWM_Start+0x72>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e015      	b.n	80033ba <HAL_TIM_PWM_Start+0x9e>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b10      	cmp	r3, #16
 8003392:	d109      	bne.n	80033a8 <HAL_TIM_PWM_Start+0x8c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e008      	b.n	80033ba <HAL_TIM_PWM_Start+0x9e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e097      	b.n	80034f2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0xb6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d0:	e023      	b.n	800341a <HAL_TIM_PWM_Start+0xfe>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0xc6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e0:	e01b      	b.n	800341a <HAL_TIM_PWM_Start+0xfe>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0xd6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f0:	e013      	b.n	800341a <HAL_TIM_PWM_Start+0xfe>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0xe6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003400:	e00b      	b.n	800341a <HAL_TIM_PWM_Start+0xfe>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xf6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003410:	e003      	b.n	800341a <HAL_TIM_PWM_Start+0xfe>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 feb6 	bl	8004194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a33      	ldr	r2, [pc, #204]	@ (80034fc <HAL_TIM_PWM_Start+0x1e0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_TIM_PWM_Start+0x13e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a32      	ldr	r2, [pc, #200]	@ (8003500 <HAL_TIM_PWM_Start+0x1e4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_TIM_PWM_Start+0x13e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a30      	ldr	r2, [pc, #192]	@ (8003504 <HAL_TIM_PWM_Start+0x1e8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_TIM_PWM_Start+0x13e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2f      	ldr	r2, [pc, #188]	@ (8003508 <HAL_TIM_PWM_Start+0x1ec>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_TIM_PWM_Start+0x13e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2d      	ldr	r2, [pc, #180]	@ (800350c <HAL_TIM_PWM_Start+0x1f0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_TIM_PWM_Start+0x142>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_TIM_PWM_Start+0x144>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003472:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <HAL_TIM_PWM_Start+0x1e0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_TIM_PWM_Start+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003486:	d013      	beq.n	80034b0 <HAL_TIM_PWM_Start+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a20      	ldr	r2, [pc, #128]	@ (8003510 <HAL_TIM_PWM_Start+0x1f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_TIM_PWM_Start+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_TIM_PWM_Start+0x1f8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_TIM_PWM_Start+0x194>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <HAL_TIM_PWM_Start+0x1e4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_PWM_Start+0x194>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a16      	ldr	r2, [pc, #88]	@ (8003504 <HAL_TIM_PWM_Start+0x1e8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d115      	bne.n	80034dc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <HAL_TIM_PWM_Start+0x1fc>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d015      	beq.n	80034ee <HAL_TIM_PWM_Start+0x1d2>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d011      	beq.n	80034ee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	e008      	b.n	80034ee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40013400 	.word	0x40013400
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	00010007 	.word	0x00010007

0800351c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003536:	2302      	movs	r3, #2
 8003538:	e0ff      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b14      	cmp	r3, #20
 8003546:	f200 80f0 	bhi.w	800372a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	080035a5 	.word	0x080035a5
 8003554:	0800372b 	.word	0x0800372b
 8003558:	0800372b 	.word	0x0800372b
 800355c:	0800372b 	.word	0x0800372b
 8003560:	080035e5 	.word	0x080035e5
 8003564:	0800372b 	.word	0x0800372b
 8003568:	0800372b 	.word	0x0800372b
 800356c:	0800372b 	.word	0x0800372b
 8003570:	08003627 	.word	0x08003627
 8003574:	0800372b 	.word	0x0800372b
 8003578:	0800372b 	.word	0x0800372b
 800357c:	0800372b 	.word	0x0800372b
 8003580:	08003667 	.word	0x08003667
 8003584:	0800372b 	.word	0x0800372b
 8003588:	0800372b 	.word	0x0800372b
 800358c:	0800372b 	.word	0x0800372b
 8003590:	080036a9 	.word	0x080036a9
 8003594:	0800372b 	.word	0x0800372b
 8003598:	0800372b 	.word	0x0800372b
 800359c:	0800372b 	.word	0x0800372b
 80035a0:	080036e9 	.word	0x080036e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa60 	bl	8003a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0208 	orr.w	r2, r2, #8
 80035be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6999      	ldr	r1, [r3, #24]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	619a      	str	r2, [r3, #24]
      break;
 80035e2:	e0a5      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fad0 	bl	8003b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6999      	ldr	r1, [r3, #24]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	021a      	lsls	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	619a      	str	r2, [r3, #24]
      break;
 8003624:	e084      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fb39 	bl	8003ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0208 	orr.w	r2, r2, #8
 8003640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0204 	bic.w	r2, r2, #4
 8003650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69d9      	ldr	r1, [r3, #28]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	61da      	str	r2, [r3, #28]
      break;
 8003664:	e064      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fba1 	bl	8003db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	021a      	lsls	r2, r3, #8
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	61da      	str	r2, [r3, #28]
      break;
 80036a6:	e043      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fc0a 	bl	8003ec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0208 	orr.w	r2, r2, #8
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0204 	bic.w	r2, r2, #4
 80036d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036e6:	e023      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fc4e 	bl	8003f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003702:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003712:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	021a      	lsls	r2, r3, #8
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003728:	e002      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
      break;
 800372e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop

08003744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIM_ConfigClockSource+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e0de      	b.n	800391e <HAL_TIM_ConfigClockSource+0x1da>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800377e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800378a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a63      	ldr	r2, [pc, #396]	@ (8003928 <HAL_TIM_ConfigClockSource+0x1e4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f000 80a9 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80037a0:	4a61      	ldr	r2, [pc, #388]	@ (8003928 <HAL_TIM_ConfigClockSource+0x1e4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f200 80ae 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 80037a8:	4a60      	ldr	r2, [pc, #384]	@ (800392c <HAL_TIM_ConfigClockSource+0x1e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f000 80a1 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80037b0:	4a5e      	ldr	r2, [pc, #376]	@ (800392c <HAL_TIM_ConfigClockSource+0x1e8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f200 80a6 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 80037b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003930 <HAL_TIM_ConfigClockSource+0x1ec>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f000 8099 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80037c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003930 <HAL_TIM_ConfigClockSource+0x1ec>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f200 809e 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 80037c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003934 <HAL_TIM_ConfigClockSource+0x1f0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	f000 8091 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80037d0:	4a58      	ldr	r2, [pc, #352]	@ (8003934 <HAL_TIM_ConfigClockSource+0x1f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	f200 8096 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 80037d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037dc:	f000 8089 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80037e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037e4:	f200 808e 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 80037e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ec:	d03e      	beq.n	800386c <HAL_TIM_ConfigClockSource+0x128>
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f2:	f200 8087 	bhi.w	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fa:	f000 8086 	beq.w	800390a <HAL_TIM_ConfigClockSource+0x1c6>
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003802:	d87f      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 8003804:	2b70      	cmp	r3, #112	@ 0x70
 8003806:	d01a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xfa>
 8003808:	2b70      	cmp	r3, #112	@ 0x70
 800380a:	d87b      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 800380c:	2b60      	cmp	r3, #96	@ 0x60
 800380e:	d050      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x16e>
 8003810:	2b60      	cmp	r3, #96	@ 0x60
 8003812:	d877      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 8003814:	2b50      	cmp	r3, #80	@ 0x50
 8003816:	d03c      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x14e>
 8003818:	2b50      	cmp	r3, #80	@ 0x50
 800381a:	d873      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d058      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x18e>
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d86f      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 8003824:	2b30      	cmp	r3, #48	@ 0x30
 8003826:	d064      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003828:	2b30      	cmp	r3, #48	@ 0x30
 800382a:	d86b      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d060      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d867      	bhi.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d05c      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003838:	2b10      	cmp	r3, #16
 800383a:	d05a      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800383c:	e062      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800384e:	f000 fc81 	bl	8004154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	609a      	str	r2, [r3, #8]
      break;
 800386a:	e04f      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800387c:	f000 fc6a 	bl	8004154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800388e:	609a      	str	r2, [r3, #8]
      break;
 8003890:	e03c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 fbdc 	bl	800405c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2150      	movs	r1, #80	@ 0x50
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fc35 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 80038b0:	e02c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	461a      	mov	r2, r3
 80038c0:	f000 fbfb 	bl	80040ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2160      	movs	r1, #96	@ 0x60
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fc25 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 80038d0:	e01c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 fbbc 	bl	800405c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2140      	movs	r1, #64	@ 0x40
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fc15 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 80038f0:	e00c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 fc0c 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 8003902:	e003      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e000      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800390a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	00100070 	.word	0x00100070
 800392c:	00100040 	.word	0x00100040
 8003930:	00100030 	.word	0x00100030
 8003934:	00100020 	.word	0x00100020

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a42      	ldr	r2, [pc, #264]	@ (8003a54 <TIM_Base_SetConfig+0x11c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00f      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003956:	d00b      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a58 <TIM_Base_SetConfig+0x120>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3e      	ldr	r2, [pc, #248]	@ (8003a5c <TIM_Base_SetConfig+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a60 <TIM_Base_SetConfig+0x128>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a33      	ldr	r2, [pc, #204]	@ (8003a54 <TIM_Base_SetConfig+0x11c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a30      	ldr	r2, [pc, #192]	@ (8003a58 <TIM_Base_SetConfig+0x120>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a5c <TIM_Base_SetConfig+0x124>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a60 <TIM_Base_SetConfig+0x128>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003a64 <TIM_Base_SetConfig+0x12c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <TIM_Base_SetConfig+0x130>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <TIM_Base_SetConfig+0x134>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a16      	ldr	r2, [pc, #88]	@ (8003a54 <TIM_Base_SetConfig+0x11c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00f      	beq.n	8003a20 <TIM_Base_SetConfig+0xe8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a17      	ldr	r2, [pc, #92]	@ (8003a60 <TIM_Base_SetConfig+0x128>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0xe8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	@ (8003a64 <TIM_Base_SetConfig+0x12c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0xe8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <TIM_Base_SetConfig+0x130>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <TIM_Base_SetConfig+0x134>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d103      	bne.n	8003a28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]
  }
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40013400 	.word	0x40013400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40014400 	.word	0x40014400
 8003a6c:	40014800 	.word	0x40014800

08003a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f023 0201 	bic.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0302 	bic.w	r3, r3, #2
 8003abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	@ (8003b7c <TIM_OC1_SetConfig+0x10c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00f      	beq.n	8003af0 <TIM_OC1_SetConfig+0x80>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b80 <TIM_OC1_SetConfig+0x110>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_OC1_SetConfig+0x80>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <TIM_OC1_SetConfig+0x114>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_OC1_SetConfig+0x80>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a29      	ldr	r2, [pc, #164]	@ (8003b88 <TIM_OC1_SetConfig+0x118>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC1_SetConfig+0x80>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a28      	ldr	r2, [pc, #160]	@ (8003b8c <TIM_OC1_SetConfig+0x11c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0308 	bic.w	r3, r3, #8
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b7c <TIM_OC1_SetConfig+0x10c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_OC1_SetConfig+0xc2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1a      	ldr	r2, [pc, #104]	@ (8003b80 <TIM_OC1_SetConfig+0x110>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_OC1_SetConfig+0xc2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a19      	ldr	r2, [pc, #100]	@ (8003b84 <TIM_OC1_SetConfig+0x114>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_OC1_SetConfig+0xc2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a18      	ldr	r2, [pc, #96]	@ (8003b88 <TIM_OC1_SetConfig+0x118>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_OC1_SetConfig+0xc2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <TIM_OC1_SetConfig+0x11c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d111      	bne.n	8003b56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800

08003b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 0210 	bic.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0320 	bic.w	r3, r3, #32
 8003bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a28      	ldr	r2, [pc, #160]	@ (8003c90 <TIM_OC2_SetConfig+0x100>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC2_SetConfig+0x6c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a27      	ldr	r2, [pc, #156]	@ (8003c94 <TIM_OC2_SetConfig+0x104>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10d      	bne.n	8003c18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <TIM_OC2_SetConfig+0x100>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00f      	beq.n	8003c40 <TIM_OC2_SetConfig+0xb0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	@ (8003c94 <TIM_OC2_SetConfig+0x104>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_OC2_SetConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c98 <TIM_OC2_SetConfig+0x108>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC2_SetConfig+0xb0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <TIM_OC2_SetConfig+0x10c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC2_SetConfig+0xb0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ca0 <TIM_OC2_SetConfig+0x110>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d113      	bne.n	8003c68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40013400 	.word	0x40013400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a27      	ldr	r2, [pc, #156]	@ (8003da0 <TIM_OC3_SetConfig+0xfc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_OC3_SetConfig+0x6a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <TIM_OC3_SetConfig+0x100>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10d      	bne.n	8003d2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003da0 <TIM_OC3_SetConfig+0xfc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00f      	beq.n	8003d52 <TIM_OC3_SetConfig+0xae>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	@ (8003da4 <TIM_OC3_SetConfig+0x100>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_OC3_SetConfig+0xae>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003da8 <TIM_OC3_SetConfig+0x104>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_OC3_SetConfig+0xae>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a19      	ldr	r2, [pc, #100]	@ (8003dac <TIM_OC3_SetConfig+0x108>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_OC3_SetConfig+0xae>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	@ (8003db0 <TIM_OC3_SetConfig+0x10c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d113      	bne.n	8003d7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40013400 	.word	0x40013400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800

08003db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	031b      	lsls	r3, r3, #12
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a28      	ldr	r2, [pc, #160]	@ (8003eb4 <TIM_OC4_SetConfig+0x100>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_OC4_SetConfig+0x6c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a27      	ldr	r2, [pc, #156]	@ (8003eb8 <TIM_OC4_SetConfig+0x104>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10d      	bne.n	8003e3c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	031b      	lsls	r3, r3, #12
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <TIM_OC4_SetConfig+0x100>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00f      	beq.n	8003e64 <TIM_OC4_SetConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb8 <TIM_OC4_SetConfig+0x104>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00b      	beq.n	8003e64 <TIM_OC4_SetConfig+0xb0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <TIM_OC4_SetConfig+0x108>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_OC4_SetConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec0 <TIM_OC4_SetConfig+0x10c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_OC4_SetConfig+0xb0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a19      	ldr	r2, [pc, #100]	@ (8003ec4 <TIM_OC4_SetConfig+0x110>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d113      	bne.n	8003e8c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40013400 	.word	0x40013400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800

08003ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	@ (8003f7c <TIM_OC5_SetConfig+0xb4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a16      	ldr	r2, [pc, #88]	@ (8003f80 <TIM_OC5_SetConfig+0xb8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <TIM_OC5_SetConfig+0xbc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a14      	ldr	r2, [pc, #80]	@ (8003f88 <TIM_OC5_SetConfig+0xc0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a13      	ldr	r2, [pc, #76]	@ (8003f8c <TIM_OC5_SetConfig+0xc4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d109      	bne.n	8003f56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <TIM_OC6_SetConfig+0xb8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00f      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a17      	ldr	r2, [pc, #92]	@ (800404c <TIM_OC6_SetConfig+0xbc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <TIM_OC6_SetConfig+0xc0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <TIM_OC6_SetConfig+0xc4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <TIM_OC6_SetConfig+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800

0800405c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0201 	bic.w	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 030a 	bic.w	r3, r3, #10
 8004098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f023 0210 	bic.w	r2, r3, #16
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	f043 0307 	orr.w	r3, r3, #7
 8004140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800416e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	431a      	orrs	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2201      	movs	r2, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e065      	b.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2c      	ldr	r2, [pc, #176]	@ (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2b      	ldr	r2, [pc, #172]	@ (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1b      	ldr	r2, [pc, #108]	@ (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426e:	d013      	beq.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a17      	ldr	r2, [pc, #92]	@ (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a12      	ldr	r2, [pc, #72]	@ (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10c      	bne.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800429e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40013400 	.word	0x40013400
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40014000 	.word	0x40014000

080042e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e073      	b.n	80043e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d11c      	bne.n	80043d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	051b      	lsls	r3, r3, #20
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40013400 	.word	0x40013400

080043fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e042      	b.n	8004494 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fd faab 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2224      	movs	r2, #36	@ 0x24
 800442a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fbbc 	bl	8004bc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8ed 	bl	800462c <UART_SetConfig>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e01b      	b.n	8004494 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800446a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800447a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fc3b 	bl	8004d08 <UART_CheckIdleState>
 8004492:	4603      	mov	r3, r0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	@ 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	f040 80b5 	bne.w	8004622 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Receive+0x28>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0ad      	b.n	8004624 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2222      	movs	r2, #34	@ 0x22
 80044d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044de:	f7fd fb75 	bl	8001bcc <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fc:	d10e      	bne.n	800451c <HAL_UART_Receive+0x80>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d105      	bne.n	8004512 <HAL_UART_Receive+0x76>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800450c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004510:	e02d      	b.n	800456e <HAL_UART_Receive+0xd2>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	22ff      	movs	r2, #255	@ 0xff
 8004516:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800451a:	e028      	b.n	800456e <HAL_UART_Receive+0xd2>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_UART_Receive+0xa4>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_UART_Receive+0x9a>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	22ff      	movs	r2, #255	@ 0xff
 8004530:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004534:	e01b      	b.n	800456e <HAL_UART_Receive+0xd2>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	227f      	movs	r2, #127	@ 0x7f
 800453a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800453e:	e016      	b.n	800456e <HAL_UART_Receive+0xd2>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004548:	d10d      	bne.n	8004566 <HAL_UART_Receive+0xca>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Receive+0xc0>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	227f      	movs	r2, #127	@ 0x7f
 8004556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800455a:	e008      	b.n	800456e <HAL_UART_Receive+0xd2>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	223f      	movs	r2, #63	@ 0x3f
 8004560:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004564:	e003      	b.n	800456e <HAL_UART_Receive+0xd2>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004574:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457e:	d108      	bne.n	8004592 <HAL_UART_Receive+0xf6>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	e003      	b.n	800459a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800459a:	e036      	b.n	800460a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2120      	movs	r1, #32
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fc58 	bl	8004e5c <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e032      	b.n	8004624 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	8a7b      	ldrh	r3, [r7, #18]
 80045ce:	4013      	ands	r3, r2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e00c      	b.n	80045f8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	8a7b      	ldrh	r3, [r7, #18]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	4013      	ands	r3, r2
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1c2      	bne.n	800459c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800462c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004630:	b08c      	sub	sp, #48	@ 0x30
 8004632:	af00      	add	r7, sp, #0
 8004634:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	431a      	orrs	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	431a      	orrs	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	4313      	orrs	r3, r2
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4bab      	ldr	r3, [pc, #684]	@ (8004908 <UART_SetConfig+0x2dc>)
 800465c:	4013      	ands	r3, r2
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004664:	430b      	orrs	r3, r1
 8004666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4aa0      	ldr	r2, [pc, #640]	@ (800490c <UART_SetConfig+0x2e0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004694:	4313      	orrs	r3, r2
 8004696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	f023 010f 	bic.w	r1, r3, #15
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a91      	ldr	r2, [pc, #580]	@ (8004910 <UART_SetConfig+0x2e4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d125      	bne.n	800471c <UART_SetConfig+0xf0>
 80046d0:	4b90      	ldr	r3, [pc, #576]	@ (8004914 <UART_SetConfig+0x2e8>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d81a      	bhi.n	8004714 <UART_SetConfig+0xe8>
 80046de:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <UART_SetConfig+0xb8>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004705 	.word	0x08004705
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	0800470d 	.word	0x0800470d
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046fa:	e0d6      	b.n	80048aa <UART_SetConfig+0x27e>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004702:	e0d2      	b.n	80048aa <UART_SetConfig+0x27e>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800470a:	e0ce      	b.n	80048aa <UART_SetConfig+0x27e>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004712:	e0ca      	b.n	80048aa <UART_SetConfig+0x27e>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800471a:	e0c6      	b.n	80048aa <UART_SetConfig+0x27e>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a7d      	ldr	r2, [pc, #500]	@ (8004918 <UART_SetConfig+0x2ec>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d138      	bne.n	8004798 <UART_SetConfig+0x16c>
 8004726:	4b7b      	ldr	r3, [pc, #492]	@ (8004914 <UART_SetConfig+0x2e8>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d82d      	bhi.n	8004790 <UART_SetConfig+0x164>
 8004734:	a201      	add	r2, pc, #4	@ (adr r2, 800473c <UART_SetConfig+0x110>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004771 	.word	0x08004771
 8004740:	08004791 	.word	0x08004791
 8004744:	08004791 	.word	0x08004791
 8004748:	08004791 	.word	0x08004791
 800474c:	08004781 	.word	0x08004781
 8004750:	08004791 	.word	0x08004791
 8004754:	08004791 	.word	0x08004791
 8004758:	08004791 	.word	0x08004791
 800475c:	08004779 	.word	0x08004779
 8004760:	08004791 	.word	0x08004791
 8004764:	08004791 	.word	0x08004791
 8004768:	08004791 	.word	0x08004791
 800476c:	08004789 	.word	0x08004789
 8004770:	2300      	movs	r3, #0
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004776:	e098      	b.n	80048aa <UART_SetConfig+0x27e>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477e:	e094      	b.n	80048aa <UART_SetConfig+0x27e>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004786:	e090      	b.n	80048aa <UART_SetConfig+0x27e>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800478e:	e08c      	b.n	80048aa <UART_SetConfig+0x27e>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004796:	e088      	b.n	80048aa <UART_SetConfig+0x27e>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5f      	ldr	r2, [pc, #380]	@ (800491c <UART_SetConfig+0x2f0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d125      	bne.n	80047ee <UART_SetConfig+0x1c2>
 80047a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004914 <UART_SetConfig+0x2e8>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047ac:	2b30      	cmp	r3, #48	@ 0x30
 80047ae:	d016      	beq.n	80047de <UART_SetConfig+0x1b2>
 80047b0:	2b30      	cmp	r3, #48	@ 0x30
 80047b2:	d818      	bhi.n	80047e6 <UART_SetConfig+0x1ba>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d00a      	beq.n	80047ce <UART_SetConfig+0x1a2>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d814      	bhi.n	80047e6 <UART_SetConfig+0x1ba>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <UART_SetConfig+0x19a>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d008      	beq.n	80047d6 <UART_SetConfig+0x1aa>
 80047c4:	e00f      	b.n	80047e6 <UART_SetConfig+0x1ba>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047cc:	e06d      	b.n	80048aa <UART_SetConfig+0x27e>
 80047ce:	2302      	movs	r3, #2
 80047d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d4:	e069      	b.n	80048aa <UART_SetConfig+0x27e>
 80047d6:	2304      	movs	r3, #4
 80047d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047dc:	e065      	b.n	80048aa <UART_SetConfig+0x27e>
 80047de:	2308      	movs	r3, #8
 80047e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e4:	e061      	b.n	80048aa <UART_SetConfig+0x27e>
 80047e6:	2310      	movs	r3, #16
 80047e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ec:	e05d      	b.n	80048aa <UART_SetConfig+0x27e>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004920 <UART_SetConfig+0x2f4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0x218>
 80047f8:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <UART_SetConfig+0x2e8>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004802:	2bc0      	cmp	r3, #192	@ 0xc0
 8004804:	d016      	beq.n	8004834 <UART_SetConfig+0x208>
 8004806:	2bc0      	cmp	r3, #192	@ 0xc0
 8004808:	d818      	bhi.n	800483c <UART_SetConfig+0x210>
 800480a:	2b80      	cmp	r3, #128	@ 0x80
 800480c:	d00a      	beq.n	8004824 <UART_SetConfig+0x1f8>
 800480e:	2b80      	cmp	r3, #128	@ 0x80
 8004810:	d814      	bhi.n	800483c <UART_SetConfig+0x210>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <UART_SetConfig+0x1f0>
 8004816:	2b40      	cmp	r3, #64	@ 0x40
 8004818:	d008      	beq.n	800482c <UART_SetConfig+0x200>
 800481a:	e00f      	b.n	800483c <UART_SetConfig+0x210>
 800481c:	2300      	movs	r3, #0
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004822:	e042      	b.n	80048aa <UART_SetConfig+0x27e>
 8004824:	2302      	movs	r3, #2
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482a:	e03e      	b.n	80048aa <UART_SetConfig+0x27e>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004832:	e03a      	b.n	80048aa <UART_SetConfig+0x27e>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800483a:	e036      	b.n	80048aa <UART_SetConfig+0x27e>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004842:	e032      	b.n	80048aa <UART_SetConfig+0x27e>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a30      	ldr	r2, [pc, #192]	@ (800490c <UART_SetConfig+0x2e0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d12a      	bne.n	80048a4 <UART_SetConfig+0x278>
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <UART_SetConfig+0x2e8>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004854:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004858:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800485c:	d01a      	beq.n	8004894 <UART_SetConfig+0x268>
 800485e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004862:	d81b      	bhi.n	800489c <UART_SetConfig+0x270>
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004868:	d00c      	beq.n	8004884 <UART_SetConfig+0x258>
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800486e:	d815      	bhi.n	800489c <UART_SetConfig+0x270>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x250>
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004878:	d008      	beq.n	800488c <UART_SetConfig+0x260>
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x270>
 800487c:	2300      	movs	r3, #0
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004882:	e012      	b.n	80048aa <UART_SetConfig+0x27e>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488a:	e00e      	b.n	80048aa <UART_SetConfig+0x27e>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004892:	e00a      	b.n	80048aa <UART_SetConfig+0x27e>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489a:	e006      	b.n	80048aa <UART_SetConfig+0x27e>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e002      	b.n	80048aa <UART_SetConfig+0x27e>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a17      	ldr	r2, [pc, #92]	@ (800490c <UART_SetConfig+0x2e0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	f040 80a8 	bne.w	8004a06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d834      	bhi.n	8004928 <UART_SetConfig+0x2fc>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0x298>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	08004929 	.word	0x08004929
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	08004929 	.word	0x08004929
 80048d4:	080048f7 	.word	0x080048f7
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004929 	.word	0x08004929
 80048e0:	08004929 	.word	0x08004929
 80048e4:	080048ff 	.word	0x080048ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e8:	f7fe f974 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80048ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048ee:	e021      	b.n	8004934 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <UART_SetConfig+0x2f8>)
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048f4:	e01e      	b.n	8004934 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f6:	f7fe f8ff 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 80048fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048fc:	e01a      	b.n	8004934 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004904:	e016      	b.n	8004934 <UART_SetConfig+0x308>
 8004906:	bf00      	nop
 8004908:	cfff69f3 	.word	0xcfff69f3
 800490c:	40008000 	.word	0x40008000
 8004910:	40013800 	.word	0x40013800
 8004914:	40021000 	.word	0x40021000
 8004918:	40004400 	.word	0x40004400
 800491c:	40004800 	.word	0x40004800
 8004920:	40004c00 	.word	0x40004c00
 8004924:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004932:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 812a 	beq.w	8004b90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	4a9e      	ldr	r2, [pc, #632]	@ (8004bbc <UART_SetConfig+0x590>)
 8004942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004946:	461a      	mov	r2, r3
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	fbb3 f3f2 	udiv	r3, r3, r2
 800494e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	429a      	cmp	r2, r3
 800495e:	d305      	bcc.n	800496c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	d903      	bls.n	8004974 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004972:	e10d      	b.n	8004b90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	2200      	movs	r2, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	60fa      	str	r2, [r7, #12]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	4a8e      	ldr	r2, [pc, #568]	@ (8004bbc <UART_SetConfig+0x590>)
 8004982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004986:	b29b      	uxth	r3, r3
 8004988:	2200      	movs	r2, #0
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004992:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004996:	f7fb fc3f 	bl	8000218 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	020b      	lsls	r3, r1, #8
 80049ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049b0:	0202      	lsls	r2, r0, #8
 80049b2:	6979      	ldr	r1, [r7, #20]
 80049b4:	6849      	ldr	r1, [r1, #4]
 80049b6:	0849      	lsrs	r1, r1, #1
 80049b8:	2000      	movs	r0, #0
 80049ba:	460c      	mov	r4, r1
 80049bc:	4605      	mov	r5, r0
 80049be:	eb12 0804 	adds.w	r8, r2, r4
 80049c2:	eb43 0905 	adc.w	r9, r3, r5
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	469a      	mov	sl, r3
 80049ce:	4693      	mov	fp, r2
 80049d0:	4652      	mov	r2, sl
 80049d2:	465b      	mov	r3, fp
 80049d4:	4640      	mov	r0, r8
 80049d6:	4649      	mov	r1, r9
 80049d8:	f7fb fc1e 	bl	8000218 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ea:	d308      	bcc.n	80049fe <UART_SetConfig+0x3d2>
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f2:	d204      	bcs.n	80049fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	e0c8      	b.n	8004b90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a04:	e0c4      	b.n	8004b90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0e:	d167      	bne.n	8004ae0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004a10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d828      	bhi.n	8004a6a <UART_SetConfig+0x43e>
 8004a18:	a201      	add	r2, pc, #4	@ (adr r2, 8004a20 <UART_SetConfig+0x3f4>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	08004a6b 	.word	0x08004a6b
 8004a30:	08004a5b 	.word	0x08004a5b
 8004a34:	08004a6b 	.word	0x08004a6b
 8004a38:	08004a6b 	.word	0x08004a6b
 8004a3c:	08004a6b 	.word	0x08004a6b
 8004a40:	08004a63 	.word	0x08004a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a44:	f7fe f8c6 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8004a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a4a:	e014      	b.n	8004a76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a4c:	f7fe f8d8 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8004a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a52:	e010      	b.n	8004a76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a54:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc0 <UART_SetConfig+0x594>)
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a58:	e00d      	b.n	8004a76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5a:	f7fe f84d 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8004a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a60:	e009      	b.n	8004a76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a68:	e005      	b.n	8004a76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8089 	beq.w	8004b90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	4a4e      	ldr	r2, [pc, #312]	@ (8004bbc <UART_SetConfig+0x590>)
 8004a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a90:	005a      	lsls	r2, r3, #1
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	441a      	add	r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	d916      	bls.n	8004ad8 <UART_SetConfig+0x4ac>
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab0:	d212      	bcs.n	8004ad8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f023 030f 	bic.w	r3, r3, #15
 8004aba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	8bfb      	ldrh	r3, [r7, #30]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	8bfa      	ldrh	r2, [r7, #30]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	e05b      	b.n	8004b90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ade:	e057      	b.n	8004b90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ae0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d828      	bhi.n	8004b3a <UART_SetConfig+0x50e>
 8004ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8004af0 <UART_SetConfig+0x4c4>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b1d 	.word	0x08004b1d
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	08004b3b 	.word	0x08004b3b
 8004b00:	08004b2b 	.word	0x08004b2b
 8004b04:	08004b3b 	.word	0x08004b3b
 8004b08:	08004b3b 	.word	0x08004b3b
 8004b0c:	08004b3b 	.word	0x08004b3b
 8004b10:	08004b33 	.word	0x08004b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fe f85e 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8004b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b1a:	e014      	b.n	8004b46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b1c:	f7fe f870 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8004b20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b22:	e010      	b.n	8004b46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b24:	4b26      	ldr	r3, [pc, #152]	@ (8004bc0 <UART_SetConfig+0x594>)
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b28:	e00d      	b.n	8004b46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2a:	f7fd ffe5 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8004b2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b30:	e009      	b.n	8004b46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b38:	e005      	b.n	8004b46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b44:	bf00      	nop
    }

    if (pclk != 0U)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d021      	beq.n	8004b90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <UART_SetConfig+0x590>)
 8004b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	441a      	add	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	2b0f      	cmp	r3, #15
 8004b74:	d909      	bls.n	8004b8a <UART_SetConfig+0x55e>
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b7c:	d205      	bcs.n	8004b8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	e002      	b.n	8004b90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3730      	adds	r7, #48	@ 0x30
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bba:	bf00      	nop
 8004bbc:	08005290 	.word	0x08005290
 8004bc0:	00f42400 	.word	0x00f42400

08004bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01a      	beq.n	8004cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc2:	d10a      	bne.n	8004cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b098      	sub	sp, #96	@ 0x60
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d18:	f7fc ff58 	bl	8001bcc <HAL_GetTick>
 8004d1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d12f      	bne.n	8004d8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d34:	2200      	movs	r2, #0
 8004d36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f88e 	bl	8004e5c <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d022      	beq.n	8004d8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e063      	b.n	8004e54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d149      	bne.n	8004e2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da2:	2200      	movs	r2, #0
 8004da4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f857 	bl	8004e5c <UART_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d03c      	beq.n	8004e2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e6      	bne.n	8004db4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e06:	61fa      	str	r2, [r7, #28]
 8004e08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	617b      	str	r3, [r7, #20]
   return(result);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e012      	b.n	8004e54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3758      	adds	r7, #88	@ 0x58
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6c:	e04f      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d04b      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fc fea9 	bl	8001bcc <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e04e      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d037      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b80      	cmp	r3, #128	@ 0x80
 8004ea2:	d034      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d031      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d110      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f838 	bl	8004f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e029      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee8:	d111      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f81e 	bl	8004f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e00f      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4013      	ands	r3, r2
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d0a0      	beq.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b095      	sub	sp, #84	@ 0x54
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e6      	bne.n	8004f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e3      	bne.n	8004f70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0310 	bic.w	r3, r3, #16
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ff6:	bf00      	nop
 8004ff8:	3754      	adds	r7, #84	@ 0x54
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UARTEx_DisableFifoMode+0x16>
 8005014:	2302      	movs	r3, #2
 8005016:	e027      	b.n	8005068 <HAL_UARTEx_DisableFifoMode+0x66>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2224      	movs	r2, #36	@ 0x24
 8005024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005046:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005088:	2302      	movs	r3, #2
 800508a:	e02d      	b.n	80050e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f84f 	bl	800516c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005104:	2302      	movs	r3, #2
 8005106:	e02d      	b.n	8005164 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	@ 0x24
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f811 	bl	800516c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800518c:	e031      	b.n	80051f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800518e:	2308      	movs	r3, #8
 8005190:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005192:	2308      	movs	r3, #8
 8005194:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	0e5b      	lsrs	r3, r3, #25
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	0f5b      	lsrs	r3, r3, #29
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051b6:	7bbb      	ldrb	r3, [r7, #14]
 80051b8:	7b3a      	ldrb	r2, [r7, #12]
 80051ba:	4911      	ldr	r1, [pc, #68]	@ (8005200 <UARTEx_SetNbDataToProcess+0x94>)
 80051bc:	5c8a      	ldrb	r2, [r1, r2]
 80051be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051c2:	7b3a      	ldrb	r2, [r7, #12]
 80051c4:	490f      	ldr	r1, [pc, #60]	@ (8005204 <UARTEx_SetNbDataToProcess+0x98>)
 80051c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	7b7a      	ldrb	r2, [r7, #13]
 80051d8:	4909      	ldr	r1, [pc, #36]	@ (8005200 <UARTEx_SetNbDataToProcess+0x94>)
 80051da:	5c8a      	ldrb	r2, [r1, r2]
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051e0:	7b7a      	ldrb	r2, [r7, #13]
 80051e2:	4908      	ldr	r1, [pc, #32]	@ (8005204 <UARTEx_SetNbDataToProcess+0x98>)
 80051e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	080052a8 	.word	0x080052a8
 8005204:	080052b0 	.word	0x080052b0

08005208 <memset>:
 8005208:	4402      	add	r2, r0
 800520a:	4603      	mov	r3, r0
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	f803 1b01 	strb.w	r1, [r3], #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4d0d      	ldr	r5, [pc, #52]	@ (8005250 <__libc_init_array+0x38>)
 800521c:	4c0d      	ldr	r4, [pc, #52]	@ (8005254 <__libc_init_array+0x3c>)
 800521e:	1b64      	subs	r4, r4, r5
 8005220:	10a4      	asrs	r4, r4, #2
 8005222:	2600      	movs	r6, #0
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	4d0b      	ldr	r5, [pc, #44]	@ (8005258 <__libc_init_array+0x40>)
 800522a:	4c0c      	ldr	r4, [pc, #48]	@ (800525c <__libc_init_array+0x44>)
 800522c:	f000 f818 	bl	8005260 <_init>
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	2600      	movs	r6, #0
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f855 3b04 	ldr.w	r3, [r5], #4
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	080052c0 	.word	0x080052c0
 8005254:	080052c0 	.word	0x080052c0
 8005258:	080052c0 	.word	0x080052c0
 800525c:	080052c4 	.word	0x080052c4

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
